Jump to navigation
Jump to search
←Index
This page is for mod authors. Players: see the mod compatibility list instead.

This page explains how to update your mods for compatibility with Stardew Valley 1.6, and documents some of the changes and new functionality. See also Migrate to SMAPI 4.0.
Contents
1 FAQs
1.1 What's changing?
1.2 Is this the modapocalypse?
1.3 How to update your mod
2 What's new architecturally?
2.1 .NET 6
2.2 Trigger actions
2.3 Hash set fields
2.4 DataLoader
2.5 Unique string IDs
3 What's new for items
3.1 Custom items
3.2 Custom big craftables
3.3 Custom crops
3.4 Custom fences
3.5 Custom floors (craftable) & paths
3.6 Custom machines
3.7 Custom melee weapons
3.8 Custom movie concessions
3.9 Custom museum donations & rewards
3.10 Custom fruit trees
3.11 Custom objects
3.12 Custom pants
3.13 Custom shirts
3.14 Custom tools
3.15 Custom wild trees
3.16 Default recipes
3.17 Global inventories
3.18 Hats on aquarium fish
3.19 Context tag changes
3.20 Inventory class
3.21 Furniture changes
3.22 Other item changes for C# mods
3.23 Other item changes
4 What's new for locations & weather
4.1 Custom locations
4.2 Custom location contexts
4.3 Custom garbage cans
4.4 Custom map actions
4.5 Custom map layers
4.6 Custom minecarts
4.7 Custom passive festivals
4.8 Custom weather
4.9 Custom world maps
4.10 New map properties
4.11 Other map property changes
4.12 Tile property changes
4.13 Other location/map changes
5 What's new for buildings
5.1 Custom buildings
5.2 Build anywhere
5.3 Other building changes
6 What's new for NPCs
6.1 Custom NPCs
6.2 Custom NPC appearance
6.3 Custom farm animals
6.4 Custom pets
6.5 Custom monster eradication goals
6.6 Custom phone calls
6.7 Custom shops
6.8 Dialogue changes
6.9 Schedule changes
6.10 Other NPC changes
7 What's new for everything else
7.1 Buff overhaul
7.2 Custom audio
7.3 Custom buffs
7.4 Custom data fields
7.5 Custom giant crops
7.6 Custom jukebox tracks
7.7 Custom movies
7.8 Custom wedding event
7.9 Game state queries
7.10 Gender changes
7.11 Item queries
7.12 Item spawn fields
7.13 Color fields
7.14 modData field changes
7.15 Quantity modifiers
7.16 Tokenizable string format
7.17 Event changes
7.18 Mail changes
7.19 Stat changes for C# mods
7.20 New C# utility methods
7.21 Static delegate builder
7.22 Game logging changes
7.23 Other changes
8 Breaking changes for C# mods
8.1 .NET 6
8.2 Item ID changes
8.3 Other ID changes
8.4 Building and animal changes
8.5 Player changes
8.6 Collision changes
8.7 Other breaking API changes
8.8 Check for obsolete code
9 Breaking changes for content packs
9.1 Standardized ID fields
9.2 Event ID changes
9.3 Monster eradication goal flag changes
9.4 XNB impact
10 Vanilla release notes
11 See also
FAQs
SMAPI compatibility over time. The Stardew Valley 1.6 release appears as a sudden drop in March 2024.
What's changing?
Stardew Valley 1.6 makes fundamental changes to the game code to make it more extensible for mods.
Is this the modapocalypse?
Maybe. The update includes major changes to fundamental parts of the game, and SMAPI and Content Patcher can't feasibly rewrite every older mod for compatibility with some of the changes. This will break many existing mods until they're updated for the changes. However, per discussion between the game developers and modding community, we've agreed that this short-term pain is more than offset by the huge long-term improvements to modding.
How to update your mod
The rest of this page may seem overwhelming, but fortunately most of it probably doesn't apply to your specific mods. Here's a suggested 'quick start' guide to update a mod for Stardew Valley 1.6.
For C# mods:
Update the mod build config NuGet package to the latest version.
In each .csproj project file, change <TargetFramework>net5.0</TargetFramework> to <TargetFramework>net6.0</TargetFramework>.
(Tip: if the second line looks like <Project ToolsVersion=... instead of <Project Sdk="Microsoft.NET.Sdk">, you'll need to migrate it to Stardew Valley 1.5.5 first.)
Rebuild the solution.
Fix any build errors. You can search this page for relevant info as needed.
Review all build warnings (particularly obsolete-code warnings), which may indicate code that broke in 1.6.
Increment your mod version in manifest.json.
(Some mods may be added to SMAPI's compatibility blacklist due to runtime errors. Incrementing the mod version will fix that if so.)
Test to make sure the mod works.
Skim through breaking changes for C# mods and the table of contents, and check any section that might be relevant to the mod.
For Content Patcher packs:
Follow the Content Patcher migration guide until your content pack has "Format": "2.5.0".
Do not skip this step! Content Patcher will assume your content pack is pre-1.6 if you don't, which can cause confusing errors if you already updated it.
Review breaking changes for content packs and update the content pack as needed.
For content packs which use another framework:
See the documentation for the framework mod. Often you won't need to update the content pack if the framework mod itself was updated.
What's new architecturally?
.NET 6
See also: .NET 6 under breaking changes.
For C# mod authors, Stardew Valley 1.6 updates from .NET 5 to .NET 6. See What's new in .NET 6 and What's new in C# 10 for more info, but some highlights include...
improved performance;
improved hot reload;
new LINQ methods;
record structs;
and support for ARM64 on macOS.
Trigger actions
See the updated docs at Modding:Trigger actions. The section below focuses on what's new in this version.
Trigger actions are a new feature which lets content packs perform an action when something happens, with support for a wide range of actions (like sending mail, changing friendship, starting a quest, etc).
For example, it lets you have logic like "When the player arrives in the Farm location, if Leo has moved to the valley, then send a letter and start a conversation topic":
{
    "Trigger": "LocationChanged",
    "Location": "Farm",
    "Condition": "PLAYER_HAS_FLAG Host leoMoved",
    "Actions": [
        "AddMail Current Abigail_LeoMoved Today",
        "AddConversationTopic LeoMoved 5"
    ]
}
Hash set fields
For C# mod authors, the game now uses hash sets for many list fields which expect unique values. That allows much more efficient O(1) read/write, prevents duplicate values, and simplifies common logic.
This affects:
type fields
Farmer achievements
dialogueQuestionsAnswered
eventsSeen
mailForTomorrow
mailReceived
professions
secretNotesSeen
songsHeard
FarmerTeam acceptedSpecialOrderTypes
broadcastedMail
completedSpecialOrders
collectedNutTracker
Game1 worldStateIDs
NetWorldState ActivePassiveFestivals
CheckedGarbage
FoundBuriedNuts
IslandVisitors
LocationsWithBuildings
Usage is very similar, and many list methods like Contains work the same way with hash sets. Here are the main differences:
Hash sets aren't ordered. For example, there's no guarantee that the first value when you enumerate it was the earliest one added.
Hash sets can't be indexed. For example, you can no longer use list[0] to get the first value. You can still enumerate them or use LINQ methods like set.First(), but in most cases you should use the set methods like Add or Contains instead.
To remove multiple matching values from the set, you can use RemoveWhere instead:
// old code
for (int i = Game1.player.mailReceived.Count - 1; i >= 0; i--)
{
    if (Game1.player.mailReceived[i].StartsWith("Example.ModId_"))
        Game1.player.mailReceived.RemoveAt(i);
}

// new code
Game1.player.mailReceived.RemoveWhere(id => id.StartsWith("Example.ModId_"));
You no longer need to check before adding a value, since the hash set will ignore duplicates.
The Add/Remove/RemoveWhere methods return whether a value was added/removed, which lets you check at the same time. For example:
if (Game1.player.mailReceived.Add("BackpackTip")) // returns true if it wasn't in the set yet
    Game1.addMailForTomorrow("pierreBackpack");
DataLoader
DataLoader is a new C# utility which provides strongly-typed methods to load the game's data assets.
This solves an issue where we often needed fragile code like Game1.content.Load<Dictionary<string, PassiveFestivalData>>("Data\\PassiveFestivals"). With that code, it's easy to accidentally misspell the asset name, use different capitalization (which would break on Linux/macOS), or use the wrong return type. If you did, you likely wouldn't notice until the code actually executed at runtime and threw an exception.
In Stardew Valley 1.6, you can now rewrite that code like DataLoader.PassiveFestivals(Game1.content). That's simpler, you can't use the wrong asset name or type, and it's more future-proof in case the game changes them.
Unique string IDs
See the updated docs at Modding:Common data field types#Unique string ID. The section below focuses on what's new in this version.
Stardew Valley now uses unique string IDs throughout the code to identify data (like events, locations, items, NPCs, etc). For example, Town is the unique ID for the Pelican Town location; no other location can use that ID. The IDs are used for a wide range of purposes, from internal game logic to content pack edits.
For mods, it's strongly recommended to...
Use namespaced IDs prefixed with your mod's unique ID for all new content. For example, if your mod ID is Example.PufferchickMod and you're adding a pufferchick plushy, your item ID would look like Example.PufferchickMod_PufferchickPlushy. In a Content Patcher pack, you can use {{ModId}}_PufferchickPlushy to insert your mod ID automatically. This eliminates ID conflicts between mods, and makes it easy (for both troubleshooters and mod code) to identify which mod added a particular content. See the new format docs for the recommended format.
Only use alphanumeric (a–z, A–Z, 0–9), underscore (_), and dot (.) characters in string IDs. This is important because they're often used in places where some characters have special meaning (like file names or game state queries).
You can optionally migrate pre-1.6 content to use unique string IDs too, without breaking existing players' saves. This is recommended to reduce mod conflicts and simplify troubleshooting going forward. Here's how to migrate for each data type:
migration steps for pre-1.6 content 




What's new for items
Custom items
See the updated docs at Modding:Items. The section below focuses on what's new in this version.
Overview
Stardew Valley 1.6 makes three major changes to how items work in the game:
Each item now has a string ID (ItemId) and a globally unique string ID (QualifiedItemId). The QualifiedItemId is auto-generated by prefixing the ItemId with the item type identifier.
For legacy reasons, the ItemId for vanilla items may not be globally unique. For example, Pufferfish (object 128) and Mushroom Box (bigcraftable 128) both have ItemId: 128. They can be distinguished by their QualifiedItemId, which are (O)128 and (BC)128 respectively.
Each item type now has an item data definition in the game code which tells the game how to handle it. C# mods can add or edit definitions. Each definition has a unique prefix which is used in the qualified item IDs. The vanilla types are bigcraftables ((BC)), boots ((B)), farmhouse flooring ((FL)), furniture ((F)), hats ((H)), objects ((O)), pants ((P)), shirts ((S)), tools ((T)), wallpaper ((WP)), and weapons ((W)).
Custom items can now provide their own item texture, specified in a new field in the item data assets (see below). The item's ParentSheetIndex field is the index within that texture.
In other words, the four important fields for items are:
name type description
ItemId string A unique string ID for this item which should be globally unique (but may not be for existing vanilla items for backwards compatibility). For example, 128 (vanilla item) or Example.ModId_Watermelon (custom item).
QualifiedItemId string A globally unique item key, like (O)128 for a vanilla item or (O)Example.ModId_Watermelon for a custom one. This is auto-generated from the TypeDefinitionId and ItemId fields.
ParentSheetIndex int The item's sprite index within its spritesheet.
TypeDefinitionId string The ID for the data definition which defines the item, like (O) for an object. You can use ItemRegistry.type_* constants with this field:
if (item.TypeDefinitionId == ItemRegistry.type_object)
   ...
Item references
Item references throughout the game code now use the ItemId instead of the ParentSheetIndex. Since the ItemId is identical to the index for existing vanilla items, most data assets are unaffected by this change. For example, here's from Data/NPCGiftTastes with one custom item:
"Universal_Like": "-2 -7 -26 -75 -80 72 395 613 634 635 636 637 638 724 459 Example.ModID_watermelon"
Unless otherwise noted, unqualified item IDs will produce objects. Some assets let you override that by specifying a QualifiedItemId value instead. For example, you can add (O)128 to the gift taste list to explicitly add for an object. Here's a partial list of data assets and their supported item ID formats:
data asset item ID format
Data/CraftingRecipes
Data/CookingRecipes
Ingredients: both supported.
Output: set field 2 to the unqualified item ID, and field 3 to one of true (bigcraftable) or false (object).
Data/fruitTrees
Fruit: both supported.
Sapling: unqualified only.
Data/NPCGiftTastes Both supported, but only (O) items can be gifted.
Item types
These are the item types for which custom items can added/edited:
item type type identifier data asset
big craftables (BC) Data/BigCraftables
Each item can set a custom texture name in the Texture field, and sprite index in the SpriteIndex field. The default texture is TileSheets/Craftables.
boots (B) Data/Boots
Each item can set a custom texture name in fields 9 (item) and 7 (shoe color), and sprite index in fields 8 (item) and 5 (shoe color). The default textures are Maps/springobjects (item) and Characters/Farmer/shoeColors (shoe color).
crops not technically an item type Data/Crops
Each crop can set a custom texture name and sprite index. The default texture is TileSheets/crops.
fish (in fish tanks) not technically an item type Data/AquariumFish
Each fish can set a custom aquarium texture name in field 6, and sprite index in field 0. The default texture is LooseSprites/AquariumFish.
furniture (F) Data/Furniture
Each item can set a custom texture name in field 9, and sprite index in field 8. The default texture is TileSheets/furniture.
fruit trees not technically an item type Data/FruitTrees
Each fruit tree can set a custom texture name and sprite index. The default texture is TileSheets/fruitTrees.
hats (H) Data/Hats
Each item can set a custom texture name in field 7, and sprite index in field 6. The default texture is Characters/Farmer/hats.
objects (O) Data/Objects
Each item can set a custom texture name in the Texture field, and sprite index in the SpriteIndex field. The default texture is Maps/springobjects.
pants (P) Data/pantsData
Each item can set a custom texture name in the Texture field, and sprite index in the SpriteIndex field. The default texture is Characters/Farmer/pants.
shirts (S) Data/shirtData
Each item can set a custom texture name in the Texture field, and sprite index in the SpriteIndex field. The default texture is Characters/Farmer/shirts.
Shirt textures must be exactly 256 pixels wide, divided into two halves: the left half for the shirt sprites, and the right half for any dye masks. The remaining space can be left blank if needed.
      sprites       dye masks
   /-----------\  /-----------\
┌────────────────────────────────┐
│ ┌───┐┌───┐┌───┐┌───┐┌───┐┌───┐ │
│ │ 0 ││ 1 ││ 2 ││ a ││ b ││ c │ │
│ └───┘└───┘└───┘└───┘└───┘└───┘ │
│ ┌───┐┌───┐┌───┐┌───┐┌───┐┌───┐ │
│ │ 3 ││ 4 ││ 5 ││ d ││ e ││ f │ │
│ └───┘└───┘└───┘└───┘└───┘└───┘ │
└────────────────────────────────┘
tools (T) Data/Tools
Each item can set a custom texture name in the Texture field, and sprite index in the SpriteIndex field. The vanilla tools use the TileSheets/Tools texture.
Wallpaper & floorpaper (WP) and (FL) Data/AdditionalWallpaperFlooring
See format docs.
weapons (W) Data/Weapons
Completely overhauled into a data model.
When resolving an unqualified item ID like 128, the game will get the first item type for which it exists in this order: object, big craftable, furniture, weapon, boots, hat, pants, shirt, tool, wallpaper, and floorpaper.
Define a custom item
You can define custom items for most vanilla item types using only Content Patcher or SMAPI's content API.
Most item data assets work just like Data/Objects. See also specific info for custom fruit trees, custom tools, and melee weapons.
Error items
In-game items with no underlying data (e.g. because you removed the mod which adds them) would previously cause issues like invisible items, errors, and crashes. This was partly mitigated by the bundled Error Handler mod.
Stardew Valley 1.6 adds comprehensive handling for such items. They'll be shown with a 🛇 sprite in inventory UIs and in-game, the name Error Item, and a description which indicates the missing item ID for troubleshooting.
For C# mods
Stardew Valley 1.6 added new ways to compare/construct items, define custom item types, and work with item metadata. Please see Modding:Items for the migrated docs.
Custom big craftables
See the updated docs at Modding:Big craftables. The section below focuses on what's new in this version.
You can now create/edit big craftables by editing the new Data/BigCraftables asset, which replaces the previous slash-delimited Data/BigCraftablesInformation.
Besides the format change, this adds...
context tags (moved from the former Data/ObjectContextTags asset);
custom fields to let framework mods support additional features.
Custom crops
See the updated docs at Modding:Crop data. The section below focuses on what's new in this version.
Crops are still stored in Data/Crops, but that asset has been overhauled in Stardew Valley 1.6. The slash-delimited entries are now models to simplify edits and enable new features.
Custom fences
See the updated docs at Modding:Fences. The section below focuses on what's new in this version.
You can now add or customize fences by editing the Data/Fences asset.
Custom floors (craftable) & paths
See the updated docs at Modding:Floors and Paths. The section below focuses on what's new in this version.
You can now add or customize craftable floors & paths by editing the Data/FloorsAndPaths asset. See the new doc page for formatting information.
Custom machines
See the updated docs at Modding:Machines. The section below focuses on what's new in this version.
You can now add/edit machine logic by editing the Data/Machines asset. This supports the full range of vanilla functionality, including calling custom code define in C# mods.
For C# mods, 1.6 also adds a new MachineDataUtility class and various Object to simplify working with machines in code. These are used by the game code itself to implement the base machine logic.
Custom melee weapons
See the updated docs at Modding:Weapons. The section below focuses on what's new in this version.
Melee weapons are still stored in Data/Weapons, but that asset has been overhauled in Stardew Valley 1.6. The slash-delimited entries are now models to simplify edits and enable new features (like the new Projectiles feature).
Custom movie concessions
See the updated docs at Modding:Movie theater data. The section below focuses on what's new in this version.
See also: custom movies.
You could already add/edit concessions sold in the movie theater, but conflicts were likely since each concession had an incrementing numeric ID which matched its position in the vanilla tilesheet.
Stardew Valley 1.6 addresses that with two changes:
The Id field is now a unique string ID.
You can now use a different texture with two new required fields:
field effect
Texture The asset name for the texture containing the concession's sprite.
SpriteIndex The index within the Texture for the concession sprite, where 0 is the top-left sprite.
Custom museum donations & rewards
See the updated docs at Modding:Museum. The section below focuses on what's new in this version.
You can now add/edit the items which the museum gives back in rewards through the new Data/MuseumRewards data asset.
The A Complete Collection achievement is automatically adjusted to require any custom donations added too. This is based on the number of donated items though, so removing custom donations later may incorrectly mark the museum complete (since you may have donated enough items to meet the total required).
Custom fruit trees
See the updated docs at Modding:Fruit trees. The section below focuses on what's new in this version.
You can now add custom fruit trees by editing the revamped Data/FruitTrees asset.
For C# mods, the fruitsOnTree field (number of fruit on the tree) has been replaced by fruit (list of fruit items).
Custom trees can be added to the game in two ways:
Spawn them on map tiles when the location is created, using the new SpawnTree: fruit <tree ID> [growth stage on location created] [growth stage on day-update regrowth] tile property. This must be added on the Paths layer, which must also have tile index 34 from the paths tilesheet.
Or give the player a seed item in the usual ways (e.g. from a shop, mail letter, etc).
Custom objects
See the updated docs at Modding:Objects. The section below focuses on what's new in this version.
You can now create/edit objects (the main item type) by editing the new Data/Objects asset, which replaces the previous slash-delimited Data/objectInformation.
Besides the format change, this adds...
support for custom textures;
revamped geode drops with support for conditions, probabilities, and item queries;
expanded food/drink buffs (e.g. set a custom buff ID, add a custom buff icon, etc);
context tags (moved from the former Data/ObjectContextTags asset);
custom fields to let framework mods support additional features.
Custom pants
See the updated docs at Modding:Pants. The section below focuses on what's new in this version.
You can now create/edit pants by editing the new Data/Pants asset, which replaces Data/clothingInformation.
Custom shirts
See the updated docs at Modding:Shirts. The section below focuses on what's new in this version.
You can now create/edit shirts by editing the new Data/Shirts asset, which replaces Data/clothingInformation.
Custom tools
See the updated docs at Modding:Tools. The section below focuses on what's new in this version.
You can now create/edit tools by editing the new Data/Tools asset. Note that drawing the tool correctly in the world (ie, while the player is trying to use it) probably still needs custom code.
Custom wild trees
See the updated docs at Modding:Wild trees. The section below focuses on what's new in this version.
You can now create/edit wild trees by editing the Data/WildTrees asset.
Custom trees can be added to the game in two ways:
Spawn them on map tiles when the location is created, using the new SpawnTree: wild <tree ID> [growth stage on location created] [growth stage on day-update regrowth] tile property. This must be added on the Paths layer, which must also have tile index 34 from the paths tilesheet.
Or give the player a seed item in the usual ways (e.g. from a shop, mail letter, etc).
Default recipes
See the updated docs at Modding:Recipe data. The section below focuses on what's new in this version.
You can now have crafting and cooking recipes that are learned automatically by setting the condition field to default. Any missing default recipes will be learned on day start.
For example, here's the chest entry from Data/CraftingRecipes:
"Chest": "388 50/Home/130/true/default/"
Global inventories
C# mods can now set a chest.GlobalInventoryId field to make it share a global inventory with every other chest having the same ID. This replaces the equivalent hardcoded logic for Junimo chests, which now just default to a "JunimoChests" global inventory ID. For example, this can be used to have multiple Junimo chest networks or make other containers share inventory.
C# mods can also use this to store items for other mod purposes, by using Game1.player.team.globalInventories or Game1.player.team.GetOrCreateGlobalInventory(id) directly.
Hats on aquarium fish
See the updated docs at Modding:Fish data. The section below focuses on what's new in this version.
Custom fish in aquariums can now wear hats, just like vanilla sea urchins. This can be enabled by specifying a new field in Data/AquariumFish:
index field purpose
7 hat position The pixel position of the hat on the sprite, specified as an object with X and Y values.
Context tag changes
See the updated docs at Modding:Context tags. The section below focuses on what's new in this version.
New context tags
1.6 adds several new item context tags:
context tag effect
campfire_item Marks the item as a campfire. If the item also has the torch_item context tag, when it's placed in the world and turned on...
campfire flames are drawn over it;
if the item is big craftable, light is emitted from its center instead of the top.
fish_pond_ignore Prevents players from adding this fish to fish ponds, even if it would otherwise match an entry in Data/FishPondData.
geode_crusher_ignored Prevents breaking this item open in a geode crusher, even if the item has geode fields in Data/Objects.
item_type_<type> For an object-type item, the type value from the 'type and category' field. (Non-object items always have the exact tag item_type_ with nothing after the last underscore.) This is automatic and shouldn't be set manually. The tag is checked in a few places (e.g. the museum to check if an item is an artifact or mineral), but most of the game won't be affected.
museum_donatable
not_museum_donatable Set whether the item can be donated to the museum, overriding the vanilla logic.
not_giftable Prevents players from gifting this item to NPCs, who'll ignore the item entirely (e.g. as if you were holding a tool).
This only affects gift-giving, it doesn't affect non-gift logic like quest goals or special order objectives. If the NPC also has a reject_* dialogue for the item, the dialogue takes priority.
not_placeable
placeable Sets whether the item can be placed on the ground.
prevent_loss_on_death Indicates the item can't be lost when the player dies.
sign_item Marks the item as a sign, which lets player display items on it or place it on a fish pond to show the fish count.
torch_item Marks the item as a torch, which lets the player turn it on/off to emit light.
See also campfire_item.
Context tags which affect machine processing:
context tag effect
crystalarium_banned When applied to a gem or mineral item, prevents players from placing it in a crystalarium.
keg_juice
keg_wine Allows processing the item in a keg to produce a juice or wine variant.
preserves_jelly
preserves_pickle Allows processing the item in a preserves jar to produce a jelly or pickled variant.
seedmaker_banned When applied to a seed item, prevents players from placing it in a seed maker.
tapper_item Marks the item as a tapper or heavy tapper.
tapper_multiplier_<multiplier> The multiplier applied to the tapper production speed. For example, 2 will make items take half their base time (i.e. each item will finish in base time/speed multiplier). Defaults to 1 if omitted.
And informational tags which have no effect on the game logic:
context tag effect
fish_legendary
fish_legendary_family Marks the fish as a legendary fish or legendary fish family. These are purely informational; the legendary fish behavior is determined by data fields like CatchLimit or IsBossFish in Data/Locations.
geode (Added automatically) Marks the item as a geode item, which can be broken open at Clint's blacksmith shop or using a geode crusher. This is added automatically if the geode fields are present in Data/Objects.
id_<item id> (Added automatically) The qualified item ID, like id_(o)128. This can be used to match or exclude an item by ID using context tags. Any spaces in the ID are replaced with underscores, and single quotes are removed.
is_machine (Added automatically) Indicates the item has machine logic. This is added automatically based on Data/Machines.
machine_input (Added automatically) Whether the item is a machine which accepts items from the player. This is added automatically based on the machine's fields in Data/Machines:
if HasInput is true;
or if any output rules have an ItemPlacedInMachine trigger.
machine_output (Added automatically) Whether the item is a machine which produces items for the player to collect. This is added automatically based on the machine's fields in Data/Machines:
if HasOutput is true;
or if it has any output rules.
ItemContextTagManager class
For C# mods, 1.6 adds a new ItemContextTagManager class which simplifies working with item context tags and reduces repeated code.
This provides a few utility methods:
method effect
GetBaseContextTags(id) Get the base context tags for an item based on its raw data in Data/Objects or Data/BigCraftables. This doesn't include dynamic tags added that are based on instance info (like quality), which you can get using item.GetContextTags().
DoesTagQueryMatch(query, tags) Get whether a context tag query matches the given tags. For example, ItemContextTagManager.DoesTagQueryMatch("bone_item, !fossil_item", item.GetContextTags()) returns true if the item is a bone item but not a fossil (like the Bone Flute).
DoAllTagsMatch(requiredTags, actualTags)
DoAnyTagsMatch(requiredTags, actualTags) Get whether every (DoAllTagsMatch) or at least one (DoAnyTagsMatch</samp) required tag matches the actual item tags. This supports negated required tags like "!fossil_item" too.
DoesTagMatch(requiredTag, actualTags) Get whether a single tag matches the actual item tags. This supports negated required tags like "!fossil_item" too.
SanitizeContextTag(tag) (Specialized) Replace characters that may appear in item names so they're valid in context tags. For example, SanitizeContextTag("Sam's Boombox") returns sams_boombox.
Other context tag changes
Context tags are now case-insensitive.
Inventory class
For C# mods, 1.6 adds a new Inventory class to manage a list of items. This is used for the Farmer.items and Chest.items fields. It implements IList<Item>, so most existing code should still work fine.
This has three main benefits:
It has methods to simplify many common operations. For example:
method effect
HasAny() Get whether the inventory contains any items (ignoring empty slots).
CountItemStacks() Get the number of item stacks in the inventory (ignoring empty slots).
ContainsId(id) Get whether the inventory contains any item with the given qualified or unqualified item ID.
ContainsId(id, minCount) Get whether the inventory contains items with the given qualified or unqualified item ID, and their combined stack size is at least minCount.
CountId(id) Get the combined stack size of all items with the given qualified or unqualified item ID.
GetById(id) Get a list of items in the inventory with the given qualified or unqualified item ID.
ReduceId(id, count) Remove the given number of items matching the given qualified or unqualified item ID. This reduces the stack size for matching items until a total of count have been removed, and clears any slots which reach a stack size of zero.
Many common operations have been unified, so previously player-only methods can now be used with chests too.
It has an internal index by item ID, so operations like items.ContainsId("(O)128") are much more efficient since they no longer iterate the list.
This replaces some previous methods:
game class old code migration
Farmer getItemCount(id)
GetTallyOfObject(id)
GetTallyOfObject(id, isBigCraftable)
hasItemInInventory(id, count)
hasItemInList(list, id, count)
To check an item ID, use items.CountId(id) or Items.ContainsId(id, count).
To check Golden Walnuts or Qi Gems, use the Game1.netWorldState.Value.GoldenWalnuts and Farmer.QiGems fields.
To check category matches or -777 (seasonal wild seeds), the getItemCount and getItemCountInList still exist.
hasItemInInventoryNamed(name)
hasItemWithNameThatContains(name) In most cases, you should match items by ID instead (see the previous row).
If you really need to match items by name, you can replace it like this:
// exact name
bool hasMatch = Game1.player.Items.Any(item => item?.Name == name);

// name contains
bool hasMatch = Game1.player.Items.Any(item => item?.Name?.Contains(name) is true);
areAllItemsNull() Use !items.HasAny().
numberOfItemsInInventory() Use items.CountItemStacks() to count all items, or Items.Count(p => p is Object) to match this method's actual behavior.
consumeObject(id, count) Use items.ReduceId(id, count).
removeItemsFromInventory(id, count)
To remove an item by ID, use items.ReduceId(id, count).
To deduct Golden Walnuts or Qi Gems, change the Game1.netWorldState.Value.GoldenWalnuts and Farmer.QiGems fields.
Object ConsumeInventoryItem(player, id, count) This was somewhat specialized and shouldn't be called by mod code, but the equivalent would be (Object.autoLoadChest ?? player.items).ReduceId(id, count). See also notes for Farmer.removeItemsFromInventory.
GetTallyOfObject(player, id) This was somewhat specialized and shouldn't be called by mod code, but the equivalent would be (Object.autoLoadChest ?? player.items).CountId(id). See also notes for Farmer.getTallyOfObject.
It implements a new IInventory interface, which lets mods pass their own implementations to code which works on inventories.
Furniture changes
See the updated docs at Modding:Furniture. The section below focuses on what's new in this version.
Data/furniture no longer has language variants. Translations were moved into Strings/Furniture.
There are a few changes in Data/furniture:
Field index 6 is now placement restrictions and field index 7 is now display name. The display name field is no longer omitted in English.
Field index 7 (display name) now allows tokenizable strings.
Added new fields:
index field effect
8 sprite index The sprite index within the spritesheet texture to draw.
9 texture (Optional) The asset name of the texture to draw. Defaults to TileSheets/furniture.
10 off limits for random sale (Optional) Whether to prevent this furniture from appearing in randomly generated shop stocks and the furniture catalogue. Default false.
11 context tags (Optional) A space-delimited list of context tags which apply to this furniture. Default none.
Other item changes for C# mods
Placed object changes:
Every placed object now has a Location property set to the location which contains it. This removes location parameters from many object methods.
Setting an object's tile position through obj.TileLocation now recalculcates its collision box automatically. (Setting it through the tileLocation net field directly won't though.)
The obj.IsScarecrow() and GetScarecrowRadius() methods now work for non-bigcraftable objects too.
Clothing changes:
Clothes.clothesType is now an enum field.
Clothing is no longer gender-specific. This renames indexInTileSheetMale to indexInTileSheet, obsoletes indexInTileSheetFemale, and converts gender-variant clothing into regular items.
Removed unused ClothesType.ACCESSORY value.
Farmer.pants and Farmer.shirt now store the item ID instead of the sprite index.
In Data/TailoringRecipes, added a CraftingIdFeminine field which overrides CraftingId for female characters.
Crop changes:
Added Game1.cropData to read crop info without constantly reloading the Data/Crops asset.
Removed most crop fields which only mirror the data (like harvestMethod or seasonsToGrowIn). Mods can get the info through crop.GetData() instead.
Partly de-hardcoded fertilizer logic. Almost all fertilizer logic is now centralized into a new patchable set of HoeDirt methods (see list below). The only fertilizer logic that's still embedded elsewhere is the interaction errors in Utility.tryToPlaceItem.
HoeDirt.fertilizer.Value is now set to null when there is no fertilizer. Both qualified and unqualified IDs should be expected.
Removed crop.InferSeedIndex(). This was used to support old crops, which are now fixed by a save migration instead.
Tool changes:
Fixed various logic not handling custom tool upgrade levels.
Other item logic:
Simplified the constructors for many item types, particularly Object.
Honey items now have their preserve field set to a new Honey type (instead of null).
The Object.performObjectDropInAction method now applies the probe argument much more consistently. This only affects method calls with probe: true.
The Item.salePrice() method now has option to get the price without profit margins.
Added new fields & methods:
type field/method effect
Chest GetItemsForPlayer() Shortcut for chest.GetItemsForPlayer(Game1.player.UniqueMultiplayerID).
Crop GetHarvestMethod() Get the method used to harvest the crop (one of HarvestMethod.Grab or HarvestMethod.Scythe).
IsInSeason(location) Whether the crop can grow in the location's current season (or true if crops ignore seasons in the location, like the greenhouse).
HoeDirt HasFertilizer() Get whether the dirt has any fertilizer applied.
CanApplyFertilizer(itemId) Get whether a player can apply the given fertilizer to this dirt.
CheckApplyFertilizerRules(itemId) Get whether a player can apply the given fertilizer to this dirt, and the reason they can't if applicable.
GetFertilizerSpeedBoost() Get the crop growth speed boost from fertilizers applied to this dirt.
GetFertilizerWaterRetentionChance() Get the water retention chance from fertilizers applied to this dirt, as a value between 0 (no change) and 1 (100% chance of staying watered).
GetFertilizerQualityBoostLevel() Get the quality boost level from fertilizers applied to this dirt, which influences the chance of producing a higher-quality crop.
GetFertilizerSourceRect() Get the pixel area within the dirt spritesheet to draw for any fertilizer applied to this dirt.
(This method existed before, but no longer requires the fertilizer ID argument.)
isWatered() Get whether the dirt is currently watered.
Item IsRecipe
Quality
Stack
sellToStorePrice(…) Equivalent to the previous Object fields/methods, to simplify common code and avoid needing to special-case Object items.
appliesProfitMargins() Get whether this item should apply profit margins to shop prices.
CanBeLostOnDeath() Get whether this item can be lost when the player dies, so it can be recovered from the item recovery service.
HasTypeId(id)
HasTypeObject()
HasTypeBigCraftable() Get whether the item has the given type definition ID. These are null-safe and double as a null check:
if (item.HasTypeId(ItemRegistry.type_object))
{
    // item is non-null and has type (O)
}
HasTypeObject() and HasTypeBigCraftable() are shortcuts for passing ItemRegistry.type_object and ItemRegistry.type_bigCraftable respectively.
TryGetTempData
SetTempData Get or set temporary item info that's not synchronized in multiplayer or written to the save file.
For example, the game uses this to pass spawn options to the fishing minigame:
if (spawn.IsBossFish)
    fish.SetTempData(nameof(spawn.IsBossFish), true);

...

fish.TryGetTempData(nameof(SpawnFishData.IsBossFish), out bool bossFish);
FishingRod CanUseBait()
CanUseTackle()
GetBait()
GetTackle()
HasMagicBait()
HasCuriosityLure() Simplifies working with the fishing rod's bait and tackle.
Furniture SetPlacement
SetHeldObject Set the furniture's position and rotation (SetPlacement) or held object (SetHeldObject). The latter will initialize the held object's tile position to match the furniture instance.
These are used by the game to initialize furniture in one go. For example:
// oak table holding decorative bowl
Furniture table = ItemRegistry
    .Create<Furniture>("(F)1120")
    .SetPlacement(5, 4, 0)
    .SetHeldObject(ItemRegistry.Create<Furniture>("(F)1364"));
IsTable() Get whether this furniture is a table.
FruitTree GetQuality() Get the quality of fruit currently being produced by the fruit tree.
TryAddFruit() Add a fruit item to the tree based on its data.
IndoorPot Water() Simplifies watering dirt in the garden pot.
Object GetBoundingBox()
GetBoundingBoxAt(x, y) Get the pixel collision area for the item placed in the world. These replace the former getBoundingBox(position) method.
Tool isScythe() Equivalent to the previous MeleeWeapon method, to simplify common code and avoid needing to special-case MeleeWeapon items.
Tree CheckForNewTexture() Reset the tree's texture if it would change based on its data.
GetMaxSizeHere Get the maximum size the tree can grow in its current position (e.g. accounting for nearby trees blocking growth).
IsGrowthBlockedByNearbyTree Get whether growth is blocked because it's too close to another fully-grown tree.
Modularized Object.CheckForAction to simplify mod patches.
Reworked Item.getOne() implementation to avoid common pitfalls. (This only affects mods with custom item classes, or which patch Item.getOne or Item._GetOneFrom.)
Fixed fruit trees forgetting the growth stage set in their constructor when they're updated overnight.
Other item changes
Added per-object display names (e.g. for custom flavored items). See the ObjectDisplayName item spawn field, or object.displayNameFormat in C#.
Item pedestals are now normal item, so you can spawn them using a mod like CJB Item Spawner to display items.
Added optional Condition game state query field to Data/SpecialOrders.
Item data changes:
The display name field now exists in English too for Data/Boots, Data/Bundles, Data/CookingRecipes, Data/CraftingRecipes, Data/Furniture, Data/Hats, and Data/Weapons.
The randomly spawned stones, twigs, and weeds have been formalized into litter. They all now have object type Litter, category -999 (StardewValley.Object.litterCategory), a relevant display name/description (like Gold Stone & Break apart to obtain gold ore instead of Stone & ...), a price of 0 (not sellable), and edibility of -300 (inedible). This also adds all mine ore nodes to Data/Objects, so the game no longer creates invalid items to show their sprite. (Doing so in 1.6 will now show an Error Item sprite instead.)
Honey items now have the honey_item context tag.
Shirts no longer have a dynamic numeric ID range; every valid shirt is now listed in Data/Shirts.
You can now apply a custom buff ID when the item is eaten, via Data/Objects's Buff field.
The type field in Data/Objects is no longer checked using substring matching (e.g. the game now uses data.Type == "Fish" instead of typeAndCategory.Contains("Fish")), which may impact mods which depended on that undocumented behavior.
Crop changes:
Paddy crops now recheck for nearby water each day, so they'll update if you add/remove a building with water or change the map layout.
In Data/Crops, each harvest option is now self-contained. For example, you can set HarvestMinStack without ExtraHarvestChance.
Fish changes:
Data/Fish is no longer translated, so there's only one Data/Fish.xnb field. Fish display names are now taken from Data/Objects.
Added a new field (index 13) in Data/Fish, which sets whether the fish can be selected for the first-catch tutorial.
Recipe changes in Data/CookingRecipes and Data/CraftingRecipes:
These assets no longer have language variants.
The display name now supports tokenizable strings.
The display name can now be left blank to get it from the first item in the output list.
Other item logic:
Missing recipes that should already be unlocked are now added to the player automatically on save load.
Data/Bundles is now loaded later, so content packs can edit it reliably.
Chests with fridge: true are now treated as mini-fridges for the cooking menu.
Gift boxes can now contain multiple items.
Fixed furniture drawn over sitting players if it has no front texture.
Fixed tool being upgraded by Clint not affected by recursive item search logic.
Fixed tool.getOne() not copying the tool name.
Fixed cooking menu constantly creating hovered item if the item/recipe names don't match.
What's new for locations & weather
Custom locations
See the updated docs at Modding:Location data. The section below focuses on what's new in this version.
You can now add/edit locations by editing the revamped Data/Locations asset. This makes nearly everything in the location configurable — display name, default warp arrival tile, how the location is created, artifact spots / fish / forage / weeds, music, etc.
See Modding:Location data for docs on the new data format.
Custom location contexts
See the updated docs at Modding:Location contexts or a new doc page. The section below focuses on what's new in this version.
Vanilla contexts
The game previously had two hardcoded location context enums: Default (for the valley) and Island (for Ginger Island). These have been replaced with data models which define the location context settings, loaded from the Data/LocationContexts asset.
The desert is now part of a new Desert context (instead of Default). Some of the previously hardcoded desert logic (like always sunny weather) is now just part of the context data in Data/LocationContexts.
Format
Custom contexts can be created by editing the new Data/LocationContexts asset, and setting the context name in the location's LocationContext map property.
The data asset consists of a string → model lookup, where the key matches the Name field and the value is a model with these fields:
Required fields:
field effect
Name The unique string ID for the location context.
Player actions:
field effect
AllowRainTotem (Optional) Whether a rain totem can be used to force rain in this context tomorrow. If false, using a rain totem here will show a "this item can't be used here" message instead.
RainTotemAffectsContext (Optional) If set, using a rain totem here will change the weather in the given context ID. For example, rain totems in the desert change weather in the valley.
MaxPassOutCost (Optional) When the player passes out (due to exhaustion or at 2am) in this context, the maximum amount of gold lost. If omitted or set to -1, uses the same value as the Default context (1,000g by default).
PassOutMail (Optional) When the player passes out (due to exhaustion or at 2am) in this context, the possible letter IDs to add to their mailbox (if they haven't received it before). If multiple letters are valid, one will be chosen randomly (unless one specifies SkipRandomSelection).
This consists of a list of models with these fields:
field effect
Id The unique string ID for this entry in the list.
Mail The letter ID to add.
The game will look for an existing letter ID in Data/mail in this order (where <billed> is Billed if they lost gold or NotBilled otherwise, and <gender> is Female or Male):
<letter id>_<billed>_<gender>
<letter id>_<billed>
<letter id>
If no match is found in Data/mail, the game will send passedOut2 instead.
If the mail ID starts with passedOut, {0} in the letter text will be replaced with the gold amount lost, and it won't appear in the collections page.
MaxPassOutCost (Optional) The maximum amount of gold lost. This is applied after the context's MaxPassOutCost (i.e. the context's value is used to calculate the random amount, then this field caps the result). Defaults to unlimited.
Condition (Optional) A game state query which indicates whether this entry is active. Defaults to always true.
SkipRandomSelection (Optional) If true, send this mail if the Condition matches instead of choosing a random valid mail. Default false.
PassOutLocations (Optional) When the player passes out (due to exhaustion or at 2am) in this context and they started the day in a different location context, the locations where they'll wake up. (If the player started the day in the same context, they'll wake up in the last bed they slept in instead.)
If the selected location doesn't contain a bed and doesn't have the AllowWakeUpWithoutBed map property, the player will wake up in the farmhouse instead.
This consists of a list of models with these fields:
field effect
Id The unique string ID for this entry in the list.
Location The internal location name.
Position The default tile position within the location, specified as an object with X and Y fields. If the location has any bed furniture, they'll be placed in the first bed found instead.
Condition (Optional) A game state query which indicates whether this entry is active. Defaults to always applied.
If no locations are specified or none match, the player will wake up in their bed at home.
ReviveLocations (Optional) If the player just got knocked out in combat, the location names where they'll wake up.
This consists of a list of models with these fields:
field effect
Id The unique string ID for this entry in the list.
Location The internal location name.
Position The tile position within the location, specified as an object with X and Y fields.
Condition (Optional) A game state query which indicates whether this entry is active. Defaults to always applied.
If the selected location has a standard event with the exact key PlayerKilled (with no / or preconditions in the key), that event will play when the player wakes up and the game will apply the lost items or gold logic. The game won't track this event, so it'll repeat each time the player is revived. If there's no such event, the player will wake up without an event, and no items or gold will be lost.
If no locations are specified or none match, the player will wake up at Harvey's clinic.
Season:
field effect
SeasonOverride (Optional) The season which is always active for locations within this context (one of spring, summer, fall, or winter). For example, setting summer will make it always summer there regardless of the calendar season. If not set, the calendar season applies.
Weather:
field effect
WeatherConditions (Optional) The weather logic to apply for locations in this context (ignored if CopyWeatherFromLocation is set). Defaults to always sunny. If multiple are specified, the first matching weather is applied.
This consists of a list of models with these fields:
field effect
Id The unique string ID for this entry in the list.
Weather The weather ID to set.
Condition (Optional) A game state query which indicates whether to apply the weather. Defaults to always applied.
CopyWeatherFromLocation (Optional) The Name (i.e. unique ID) of the location context from which to inherit weather.
If a passive festival is active in any location within this context, the weather is sunny for the entire context regardless of these fields.
Music:
field effect
DefaultMusic (Optional) The cue ID for the music to play when the player is in the location, unless overridden by a Music map property. Despite the name, this has a higher priority than the seasonal music fields below. Ignored if omitted.
DefaultMusicCondition (Optional) A game state query which returns whether the DefaultMusic field should be applied (if more specific music isn't playing). Defaults to always true.
DefaultMusicDelayOneScreen (Optional) When the player warps and the music changes, whether to silence the music and play the ambience (if any) until the next warp (similar to the default valley locations). Default false.
Music (Optional) A list of cue IDs to play before noon in this location unless it's raining, there's a Music map property, or the context has a DefaultMusic value. If multiple values are specified, the game will play one per day in sequence.
This consists of a list of models with these fields:
field effect
Id (Optional) A unique string ID which identifies this entry within the list. Defaults to the Track value.
Track The audio track ID to play.
Condition (Optional) A game state query which indicates whether this entry applies. Default true.
DayAmbience
NightAmbience (Optional) The cue ID for the background ambience to play when there's no music active, depending on the time of day. Both default to none.
PlayRandomAmbientSounds (Optional) Whether to play random outdoor ambience sounds depending on factors like the season and time of day (e.g. birds, crickets, and mysterious groan sounds in the rain). This is unrelated to the DayAmbience and NightAmbience fields. Default true.
Advanced:
field effect
CustomFields The custom fields for this entry.
Custom garbage cans
See the updated docs at Modding:Garbage cans. The section below focuses on what's new in this version.
Format
You can now add or edit garbage cans on any map by editing the new Data/GarbageCans asset (see examples below).
The asset consists of a data model with these fields:
field effect
DefaultBaseChance The probability that an item will be found when searching garbage cans, as a value between 0 (never) and 1 (always). If the probability check fails, only items that set IgnoreBaseChance can spawn. This can be overridden by the per-garbage-can BaseChance field. Default 0.2.
BeforeAll
AfterAll The items to prepend (BeforeAll) or append (AfterAll) to the GarbageCans → Items field for all garbage cans. These work exactly like the items in that field (e.g. subject to the garbage can's base chance).
GarbageCans The data for individual garbage cans. This consists of a string → model lookup with these fields:
field effect
entry key The unique string ID for this garbage can.
BaseChance (Optional) If set, overrides the root DefaultBaseChance field for this garbage can. Defaults to DefaultBaseChance.
Items (Optional) The items to try spawning when the player searches the garbage can. The first matching item in BeforeAll + Items + AfterAll will be spawned, and any further items will be ignored. Defaults to none.
This consists of a list of models with these fields:
field effect
common fields See item spawn fields for the generic item fields supported by garbage cans.
If set to an item query which returns multiple items, one of them will be selected at random.
IgnoreBaseChance (Optional) Whether this item can spawn even if the BaseChance probability check didn't pass. Default false.
IsMegaSuccess (Optional) Whether to treat this item as a 'mega success' if it's selected, which plays a special crit sound and bigger animation. Default false.
IsDoubleMegaSuccess (Optional) Whether to treat this item as an 'double mega success' if it's selected, which plays an explosion sound and dramatic animation. Default false.
AddToInventoryDirectly (Optional) Whether to add the item to the player's inventory directly, opening an item grab menu if they don't have room in their inventory. If false, the item will be dropped on the ground next to the garbage can instead. Default false.
CreateMultipleDebris (Optional) Whether to split the spawned item into multiple stacks which each have a stack size of one. This has no effect if AddToInventoryDirectly is enabled. Default false.
If the garbage can being searched doesn't have its own entry under GarbageCans, the game will just use the BeforeAll and AfterAll fields.
CustomFields The custom fields for this entry.
Example new garbage can
You can add garbage cans using only Content Patcher or SMAPI's content API. For example, this content pack adds a new garbage can entry with the ID Example.ModId_Carpenter:
{
    "Format": "2.5.0",
    "Changes": [
        {
            "Action": "EditData",
            "Target": "Data/GarbageCans",
            "TargetField": [ "GarbageCans" ],
            "Entries": {
                "{{ModId}}_Carpenter": {
                    "Items": [
                        // 25% chance of pufferfish
                        {
                            "ID": "{{ModId}}_Pufferfish",
                            "Condition": "RANDOM 0.25",
                            "ItemId": "(O)128"
                        },

                        // else guaranteed random House Plant item
                        {
                            "ID": "{{ModId}}_RandomHousePlant",
                            "ItemID": "RANDOM_ITEMS (F) 1376 1390"
                        }
                    ]
                }
            }
        }
    ]
}
Then you'd place an Action: Garbage Example.ModId_Carpenter map tile property to mark a tile as a garbage can using this data.
Example change for existing garbage can
You can edit an existing garbage cans using only Content Patcher or SMAPI's content API. For example, this content pack adds pufferfish to the Saloon garbage can, and moves it above the dish of the day.
Note that this uses TargetField to 'move into' the item list for the saloon, and then treat those items as the entry list being edited. Specifying an ID which isn't in the list will add a new entry, just like when editing a regular list asset.
{
    "Format": "2.5.0",
    "Changes": [
        {
            "Action": "EditData",
            "Target": "Data/GarbageCans",
            "TargetField": [ "GarbageCans", "Saloon", "Items" ],
            "Entries": {
                // 25% chance of pufferfish
                
                "{{ModId}}_Pufferfish":{
                    "ID": "{{ModId}}_Pufferfish",
                    "Condition": "RANDOM 0.25",
                    "ItemId": "(O)128"
                }
            },
            "MoveEntries": [
                { "ID": "{{ModId}}_Pufferfish", "BeforeId": "Base_DishOfTheDay" }
            ]
        }
    ]
}
Changes for C# mods
Previously garbage cans were tracked by Town.garbageChecked, an array of boolean fields. That approach doesn't work in Stardew Valley 1.6, since we're no longer limited to a specific set of garbage cans in the town map. This has been replaced by Game1.netWorldState.Value.CheckedGarbage, which is a hash set of garbage can IDs.
To migrate code:
action code in 1.5.6 code in 1.6
check if a garbage can was searched
Town town = (Town)Game1.getLocationFromName("Town");
if (town.garbageChecked[5])
   ...
if (Game1.netWorldState.Value.CheckedGarbage.Contains("Saloon"))
   ...
mark a garbage can searched
Town town = (Town)Game1.getLocationFromName("Town");
town.garbageChecked[5] = true;
Game1.netWorldState.Value.CheckedGarbage.Add("Saloon");
To migrate former vanilla trash can IDs:
position ID in 1.5.6 ID in 1.6
Near Jodi and Kent's house 0 JodiAndKent
Near Emily and Haley's house 1 EmilyAndHaley
Near Lewis' house 2 Mayor
Near Museum 3 Museum
Near Clint's blacksmith 4 Blacksmith
Near the Saloon 5 Saloon
Near Evelyn and George's house 6 Evelyn
Near JojaMart 7 JojaMart
Custom map actions
See the updated docs at Modding:Maps#Custom_Actions. The section below focuses on what's new in this version.
C# mods can now handle custom Action & TouchAction map properties by calling GameLocation.RegisterTileAction & RegisterTouchAction, and passing a callback which receives the location, map property arguments, player who activated it, and tile position.
For example, let's say you want a locked gate which needs a custom key item. You can add a regular TouchAction Example.ModId_UnlockGate map property (e.g. by adding it directly in the map file, or using Content Patcher's EditMap, or using the content API). Then you can just handle the logic from your C# mod. See the updated docs for an example.
As another example, let's say you want the gate to unlock when the player presses the action key. You can add a regular Action Example.ModId_UnlockGate map property (e.g. by adding it directly in the map file, or using Content Patcher's EditMap, or using the content API). Then you can just handle the logic from your C# mod. See the updated docs for an example.
Custom map layers
See the updated docs at Modding:Maps. The section below focuses on what's new in this version.
You can now add any number of map layers by suffixing a vanilla layer name (i.e. Back, Buildings, Front, or AlwaysFront) with an offset. For example, Back-1 will be drawn before/under Back, and Back2 will be drawn after/over it. You can increment the number to add more layers.
This only affects layer rendering. Tile properties must still be set on the original layers.
Custom minecarts
See the updated docs at Modding:Minecarts. The section below focuses on what's new in this version.
You can now extend minecarts by editing the Data\Minecarts data asset.
This consists of a string → model lookup, where...
The key is a unique string ID for the minecart network. When you interact with a minecart, the destinations listed for its network are shown.
The value is a model with the fields listed below.
field effect
Destinations The destinations which the player can travel to from minecarts in this network. This consists of a list of model with these fields:
field effect
Id A unique string ID for this destination within the network.
DisplayName A tokenizable string for the destination name shown in the minecart menu. You can use the location's display name with the LocationName token (like [LocationName Desert] for the desert).
TargetLocation The location ID for the destination.
TargetTile The destination tile position within the location, specified as a model with X and Y fields.
TargetDirection The direction the player should face after arrival (one of down, left, right, or up).
Condition (Optional) A game state query which indicates whether this minecart destination is available. Defaults to always available.
Price (Optional) The gold price that must be paid each time to use this destination. Default none.
BuyTicketMessage (Optional) If the destination costs money to use, a tokenizable string for the purchase confirmation message shown. If present, {0} is replaced with the purchase price. Defaults to the network's BuyTicketMessage field.
CustomFields (Optional) The custom fields for this entry.
UnlockCondition (Optional) A game state query which indicates whether this minecart network is unlocked. Default always enabled.
LockedMessage (Optional) A tokenizable string for the message shown when interacting with a minecart when the UnlockCondition false. Defaults to an "Out of order" translation.
ChooseDestinationMessage (Optional) A tokenizable string for the message shown when listing destinations to choose from. Defaults to a "Choose destination:" translation.
BuyTicketMessage (Optional) When a destination costs money to use, a tokenizable string for the purchase confirmation message shown. If present, {0} is replaced with the purchase price. Defaults to a "Buy a ticket for {0}g?" translation.
Open a minecart menu
You can use an Action: MinecartTransport [network ID] [exclude destination ID] map property to open the minecart menu. When the player interacts with the tile, it'll open the menu for the [network ID] network (default Default). if [exclude destination ID] is specified, the matching destination will be hidden from the list (usually because you're at that minecart). For example, the bus stop minecart uses Action: MinecartTransport Default Bus.
From a C# mod, you can call Game1.currentLocation.ShowMineCartMenu(networkId, excludeDestinationId) which works the same way (except that networkId is required).
Example
This Content Patcher content pack adds the Railroad as a minecart destination, complete with a map edit adding a decorative minecart. It is available after the Earthquake has occurred and minecarts have been unlocked.
{
    "Format": "2.5.0",
    "Changes": [
        // add minecart destination
        {
            "Action": "EditData",
            "Target": "Data/Minecarts",
            "TargetField": [ "Default", "Destinations" ], // for the "Default" network, edit the "Destinations" field
            "Entries": {
                "Railroad": {
                    "Id": "Railroad",
                    "DisplayName": "[LocationName Railroad]",
                    "Condition": "LOCATION_ACCESSIBLE Railroad",

                    "TargetLocation": "Railroad",
                    "TargetTile": { "X": 16, "Y": 39 },
                    "TargetDirection": "down",
                }
            }
        },

        // add decorative minecart
        {
            "Action": "EditMap",
            "Target": "Maps/Railroad",
            "FromFile": "assets/Custom_Railroad_Minecart.tmx",
            "ToArea": { "X": 15, "Y": 35, "Width": 4, "Height": 5 }
        }
    ]
}
Custom passive festivals
These docs should be merged into Modding:Festival data or a new doc page. When copying content, make sure you attribute the original authors.
You can now add or modify passive festivals by editing the Data/PassiveFestivals asset.
(A passive festival is a festival like the Night Market. They replace a location for a period of time, the player can enter/leave them anytime, and time continues passing while at the festival.)
Data format
The Data/PassiveFestivals asset consists of a string → model lookup, where...
The key is a unique string ID for the festival.
The value is a model with the fields listed below.
field effect
DisplayName A tokenizable string for the display name shown on the calendar.
Season The season when the festival becomes active.
StartDay
EndDay The days of month when the festival becomes active.
StartTime The time of day when the festival opens each day.
StartMessage A tokenizable string for the in-game toast notification shown when the festival begins each day.
MapReplacements The locations to swap for the duration of the festival. Despite the field name, this swaps locations (e.g. as added by CustomLocations using Content Patcher), and not the location's map asset.
This is specified as a string → string lookup, where the key is the original location to replace and the value is the new location. Both use the internal location name, as shown by the Debug Mode mod. For example, this swaps the Beach location with BeachNightMarket during the Night Market:
"MapReplacements": {
    "Beach": "BeachNightMarket"
}
Condition (Optional) A game state query which indicates whether the festival is enabled (subject to the other fields like StartDay and EndDay). Defaults to always enabled.
ShowOnCalendar (Optional) Whether the festival appears on the calendar, using the same iridium-star icon as the Night Market. Default true.
DailySetupMethod
CleanupMethod (Optional) A C# method which applies custom logic when the day starts (DailySetupMethod) and/or overnight after the last day of the festival (CleanupMethod).
These must be specified in the form <full type name>: <method name> (like ExampleMod.Namespace.Type, ExampleMod: MethodName). The methods must be static, take zero arguments, and return void.
CustomFields The custom fields for this entry.
NPC schedules
When a passive festival is active, NPCs will check for a schedule entry in this order:
syntax summary
<festival ID>_<festival day> Applies on the given date. The <festival day> is relative, so 1 matches the festival StartDay.
Example: NightMarket_3 or marriage_NightMarket_3
<festival ID> Applies if there's no date-specific entry.
Example: NightMarket or marriage_NightMarket
If the NPC is married to a player, they'll add a marriage_ prefix to the keys (like marriage_<festival ID>_<festival day>) and ignore any entry without the prefix.
Custom weather
See the updated docs at Modding:Weather data. The section below focuses on what's new in this version.
You can now change the weather algorithm by editing location context data, and (with a C# mod) implement custom weathers.
Fields like Game1.weather and Game1.weatherForTomorrow are now strings to support custom mod weather IDs. The change for vanilla weather has no effect on Content Patcher packs, since the new weather IDs match the ones Content Patcher was using before (i.e. Sun, Rain, Snow, Storm, and Wind). C# mods may also see a Festival weather, while Content Patcher packs will see Sun for it. The constants like Game1.weather_sunny have the new string values (with new constants like Game1.legacy_weather_sunny for the legacy values).
The base game will treat an invalid weather as sunny. C# mods can implement custom weather effects using normal SMAPI events like UpdateTicked, or by patching methods like Game1.ApplyWeatherForNewDay and Game1.populateDebrisWeatherArray.
Custom world maps
See the updated docs at Modding:World map. The section below focuses on what's new in this version.
The default world map, with the farm map area highlighted.
You can now change the world map shown in the game menu by editing the Data/WorldMap asset. This lets you...
add custom maps for certain locations;
apply texture overlays;
add/edit tooltips;
set real-time player marker positioning;
etc.
The game's default map is fully defined in Data/WorldMap, including all the display text and conditional changes.
New map properties
See the updated docs at Modding:Maps#Known_map_properties. The section below focuses on what's new in this version.
1.6 adds several new map properties.
Building construction
property explanation
CanBuildHere T
(valid in any outdoor location) Whether to allow constructing buildings in this location. The game will adjust automatically to account for it (e.g. Robin will let you choose where to build). See build anywhere in what's new.
BuildConditions <query>
(valid in any outdoor location) If CanBuildHere is set, an optional game state query which indicates whether building is allowed currently.
LooserBuildRestrictions T
(valid in any outdoor location) If set, tiles don't need to be marked Buildable T or Diggable T in their properties. Tiles can be blocked with Buildable F instead. The other restrictions still apply.
ValidBuildRect <x> <y> <width> <height>
(valid in any outdoor location) The tile area within the map where buildings may be placed. If omitted, buildings may be placed in any open space in the map.
Crops
property explanation
AllowGiantCrops T If set with any non-blank value, giant crops can grow in this location (if crops are also allowed per the crop data or PlantableLocations context field).
DirtDecayChance <chance> The probability that each dirt tile will disappear overnight if it doesn't contain a crop, as a value between 0 (never) and 1 (always). Defaults to 0 (greenhouses), 0.1 (farms), and 1 (anywhere else).
Farmhouse interior
property explanation
FarmHouseStarterGift [<id> [count]]+ The items that should appear in the initial gift box placed in the farmhouse when the save is created. This consists of one or more pairs of item ID (which can be qualified or unqualified) and count. The count is optional on the last entry.
For example, this will add 10 pufferfish (object 128) and a blobfish mask (hat 56):
FarmHouseStarterGift (O)128 10 (H)56 1
If omitted, the default items (usually a 15 parsnip seeds) are added instead.
Warps & map positions
property explanation
AllowWakeUpWithoutBed <allow> Whether the player can wake up in this location without a bed, similar to the island farmhouse. This is typically used with PassOutLocations in Data/LocationContexts.
DefaultWarpLocation <x> <y>
(valid in any location) The default arrival tile, used when a player or NPC is added to the location without a target tile (e.g. using debug commands like debug warp or debug eventbyid).
PetBowlLocation <x> <y>
(valid in the farm) The default position of the pet bowl
SpouseRoomPosition <x> <y>
(valid in farmhouse) The top-left position at which to place the spouse room.
TravelingCartPosition <x> <y>
(valid in the forest) The top-left position at which to place the Traveling Cart. This is the top-left corner of the collision box, so the roof will extend two tiles above this tile.
Other map property changes
See the updated docs at Modding:Maps. The section below focuses on what's new in this version.
map property changes
Arch
asdf
Debris
Fish Removed (these were unused).
FarmHouseFlooring
FarmHouseFurniture
FarmHouseStarterSeedsPosition
FarmHouseWallpaper These now work independently. For example, you can now use FarmHouseFlooring without needing to set FarmHouseFurniture too.
Music Deprecated; use the music fields in Data/Locations instead. This property is only applied if the location has no music in Data/Locations. This was removed from all vanilla maps.
NPCWarp
Warp Now fault-tolerant. They'll automatically ignore extra spaces, log an informative warning if parsing still fails, and continue with the next warp if possible.
Stumps Now works in all locations.
UniquePortrait
UniqueSprite Deprecated; use custom NPC appearances instead. These properties will override NPC appearances. This was removed from all vanilla maps.
Tile property changes
See the updated docs at Modding:Maps#Known tile properties. The section below focuses on what's new in this version.
You can now override a tile index property by setting it as a tile property.
Added new tile properties:
layer property explanation
Paths SpawnTree <category> <ID> <Growth stage> <Regrowth stage> Spawns a tree when the map is created. <category> may be either wild or fruit. wild will spawn a wild tree, while fruit will spawn a fruit tree.
Added new Action tile properties:
layer property explanation
Buildings Action BuildingSilo If a building covers this tile, enables silo interactions on this tile subject to the building's HayCapacity field in Data/Buildings.
Buildings Action BuildingToggleAnimalDoor If a building covers this tile, opens or closes its animal door.
Buildings Action Dialogue
The message can now be a tokenizable string.
Fixed the cursor not changing to the inspection icon when hovering on an Action Dialogue tile.
Buildings Action Forge Opens the Forge menu.
Buildings Action None Does nothing. This is used to mark the tile interactive if the click will be handled separately.
Buildings Action ObeliskWarp <location name> <x> <y> [whether to dismount] Warps the player to the specified location name and position with the Obelisk animation/sound effects.
Buildings Action OpenShop <shop id> [from direction] [open time] [close time] [owner tile area] Open the shop with the given <shop id>. All arguments besides the ID are optional:
[from direction]: if specified, the player must be standing in this direction relative to the shop (one of down, up, left, right, or none). Setting this to none disables the requirement. The default for most vanilla shops is down.
[open time] and [close time]: the start & end times in 26-hour format when the shop is available. Interacting with the tile outside those times does nothing.
[owner tile area]: if specified, the tile area which must contain one of the shop owners for the shop to be available. For a custom shop, these are defined by its Owners field. This can be specified in two forms: <x> <y> for a single tile, or <x> <y> <width> <height> for a multi-tile area.
Buildings Action PlayEvent <event id> [check preconditions] [skip if seen] [fallback action] Immediately start an event, subject to the conditions:
[check preconditions]: whether to ignore the action if the event's preconditions don't match (one of true or false). Default true.
[skip if seen]: whether to ignore the action if the player has already seen the given event. Default true.
If the event doesn't start for any reason (including the preceding conditions):
If [fallback action] is specified, it'll be run as an action. This can be any Action tile property (without the "Action " prefix), like Action PlayEvent 60367 true true PlayEvent 520702 false false to play a different event.
Otherwise the action is silently ignored.
For example, Action PlayEvent 60367 false false will replay the bus arrival event from the start of the game.
Added new TouchAction tile properties:
layer property explanation
Back TouchAction PlayEvent <event id> [check preconditions] [skip if seen] [fallback action] Equivalent to Action PlayEvent, but activated on touch. Note that [fallback action] is an Action tile property, not a TouchAction tile property.
Changed existing tile properties:
layer property reason
Back NoSpawn Added NoSpawn false form, which disables any previous NoSpawn property on the tile. For example, this can be used to enable spawning on a tile which has a NoSpawn tile index property.
TouchAction Bus Removed. This wasn't used by the game or mods.
TouchAction Emote Fixed error if the specified NPC isn't found.
Treasure Added Treasure Item <item ID> form which accepts a qualified or unqualified item ID.
Buildings Action ItemChest
Action Minecart
Action RemoveChest Removed. These weren't used by the game or mods.
Action Kitchen Now works in any location (including those without a fridge).
Other location/map changes
These docs should be merged into Modding:Maps and other pages as needed. When copying content, make sure you attribute the original authors.
Farm data:
Added SpawnMonstersByDefault field to Data/AdditionalFarms to set the default value of the 'spawn monsters at night' advanced save option.
Fixed crash on new-save screen if the farm type's tooltip has no description.
General location data:
All locations can now have animals. The IAnimalLocation is now obsolete and implemented by GameLocation.
Added new fishing areas to simplify compatibility between fish & map mods (specifically for hilltop farm, wilderness farm, town, and desert).
Added a descriptive error when a required location or layer isn't found. Mods can use map.RequireLayer and Game1.RequireLocation to get a location with similar error-checking.
Added WarpPathfindingCache for C# mods, which modularizes the NPC warp route logic. You can edit its IgnoreLocationNames, OverrideTargetNames, and GenderRestrictions fields if needed for custom locations.
Game logic which checks tile indexes is now more fault-tolerant, so it won't crash if an expected tile was edited.
Finished migrating DecoratableLocation flooring/wallpaper areas to string IDs (started in Stardew Valley 1.5.5).
General map changes:
Added validation for map properties and tile properties. If the format is invalid, the game will now log a detailed error and skip it.
Removed unused path tiles in Maps/paths and all map files.
Location context data:
Building interiors now inherit their parent's location context by default.
Added Game1.locationContextData to cache the data from Data/LocationContexts.
Added constants for the vanilla context IDs like LocationContexts.IslandId.
Added validation for required location context IDs (and LocationContexts.Require(id) for mod logic).
Removed the Name field in Data/LocationContexts, which duplicated the ID.
Added methods to simplify common operations:
type method effect
Building GetParentLocation Get the location which contains this building.
IsInCurrentLocation Get whether the building is in the same location as the current player.
HasIndoors Get whether the building has an interior location.
GetIndoors Get the location within this building, if applicable.
HasIndoorsName Get whether the building has an interior location and its unique name matches the given value (like building.HasIndoorsName("FarmHouse")).
GetIndoorsName Get the unique name of the location within this building, if applicable.
... see also other building changes for non-location methods.
Cabin
FarmHouse GetCellar Get the cellar location linked to this cabin, if any.
CanAssignFarmhand
AssignFarmhand (Cabin only) Check whether the cabin is available to assign to a farmhand, or perform the assignment.
HasOwner Get whether the home has an assigned player, regardless of whether they've finished creating their character.
OwnerId Get the unique ID of the player who owns this home, if any.
IsOwnedByCurrentPlayer Get whether the cabin belongs to the current player.
IsOwnerActivated Get whether the home has an assigned player and they've finished creating their character.
HasNpcSpouse Get whether the player who owns this home is married to any NPC (when used like HasNpcSpouse()) or a specific NPC (like HasNpcSpouse(name)). This also replaces shouldShowSpouseRoom().
Farm GetStarterFarmhouseLocation Get the default tile position for the farmhouse. (See also farm.GetMainFarmHouseEntry().)
GetStarterPetBowlLocation Get the default tile position for the pet bowl.
GameLocation AddDefaultBuildings Can be overridden to add custom buildings when the location is created and/or loaded. These can either be re-added whenever they're missing (like the vanilla farmhouse), or only built once on save creation (like the vanilla pre-built cabins).
This replaces the former farm.AddModularShippingBin() method.
GetFridge
GetFridgePosition Get the fridge's chest or tile position, if the location has one.
GetSeason
GetSeasonIndex
GetSeasonKey Get the local season that applies within the location as an enum, number (like 0 for spring), or string (like spring) respectively. For example, it's always summer on Ginger Island.
GetWeather
IsDebrisWeatherHere
IsLightningHere
IsRainingHere
IsSnowingHere Get the current weather in this location's context, regardless of whether the player is indoors and sheltered from it.
InDesertContext
InIslandContext
InValleyContext Get whether this location is within the Island or Default location context respectively.
IsActiveLocation Get whether this location is actively synced to the current player (see farmhand shadow world).
IsTemporary Get whether this is a temporary location for a festival or minigame. This is cached based on the location name (e.g. locations starting with Temp or some other specific names).
GetLocationContextId Get the ID of the location context in Data/LocationContexts which contains this building.
GetContainingBuilding Get the building instance which contains this location (like the cabin for a cabin interior), if applicable.
GetParentLocation Get the parent location which contains this one (like the farm for a cabin interior), or null if it has no parent.
GetRootLocation Get the parent location which contains this one (like the farm for a cabin interior), or the location itself if it has no parent.
GetInstancedBuildingInteriors Get all building interiors within this location which are instanced to the building (i.e. not in Game1.locations separately).
GetMapPropertySplitBySpaces
GetTilePropertySplitBySpaces Get the value of a map/tile property and split it into individual words. If the map/tile property isn't defined, returns an empty array.
For example:
string[] fields = Game1.currentLocation.GetMapPropertySplitBySpaces("ScreenshotRegion");
HasMapPropertyWithValue Get whether a map property is defined and has a non-empty value.
For example:
bool canUseCasks = Game1.currentLocation.HasMapPropertyWithValue("CanCaskHere");
StoreHayInAnySilo Add hay to any silo with free space (preferring silos in the current location, then the farm, then anywhere).
TryGetMapProperty Get a map property value as a string, if it's defined.
For example:
if (this.TryGetMapProperty("Warps", out string warps))
{
    // ...
}
TryGetMapPropertyAs Get a map property and parse it into into a bool, double, Point, Rectangle, or Vector2 value.
For example:
if (!this.TryGetMapPropertyAs("MailboxLocation", out Point position))
{
    position = new Point(68, 16); // default value
}
removeObjectsAndSpawned Remove all objects, bushes, resource clumps, and terrain features within a tile area.
OnBuildingConstructed
OnBuildingMoved
OnBuildingDemolished These methods are called for all players when any player constructs, moves, or demolishes a building.
LibraryMuseum HasDonatedArtifacts() Get whether any items have been donated to the museum.
HasDonatedArtifactAt(tile) Get whether any donated item is currently placed at the given tile position within the museum.
HasDonatedArtifact(itemId) Get whether an artifact with the given qualified or unqualified item ID has been donated to the museum.
MineShaft GetLevelName Get the location name for a generated mine or Skull Cavern level.
For example:
string locationName = MineShaft.GetLevelName(10); // returns "UndergroundMine10"
Game1.warpFarmer(locationName, 0, 0, false);
IsGeneratedLevel Get whether a location or location name is a generated mine or Skull Cavern level.
For example:
string locationName = "UndergroundMine10";
bool isMine = MineShaft.IsGeneratedLevel(locationName, out int level); // returns true, 10
VolcanoDungeon GetLevelName
IsGeneratedLevel Equivalent to the matching MineShaft methods, but for the Volcano Dungeon.
Added map/tile property TryAdd/TryGetValue extensions in StardewValley.Extensions for string property values. For example, this lets you do map.Properties.TryGetValue(key, out string value).
MineShaft.tryToAddMonster now returns whether a monster was added.
Game1.GetNumberBuildingsConstructed and location.getNumberBuildingsConstructed now have overloads to count all building types and/or specify whether to count under-construction buildings.
Fixed location.refurbishMapPortion copying Back source properties to the Building target layer.
Fixed door warps in custom indoor locations not consistently detected by the game.
What's new for buildings
Custom buildings
See the updated docs at Modding:Buildings. The section below focuses on what's new in this version.
You can now add custom buildings by editing the Data/Buildings asset.
Build anywhere
These docs should be merged into Modding:Buildings and Modding:Maps. When copying content, make sure you attribute the original authors.
You can now allow building construction for any location using the new CanBuildHere and related map properties. The game will adjust accordingly (e.g. Robin will let you choose where to construct the building).
Buildings and animals are no longer hardcoded to the farm location (except cabins and the farmhouse which still are).
Scything hay will now add hay to silos in any location, and animals will be auto-fed from hay in any location.
Other building changes
These docs should be merged into Modding:Buildings. When copying content, make sure you attribute the original authors.
See also: other location changes for location-related building changes.
General building changes
Building display names & descriptions are now in Strings/Buildings for reuse.
Removed Data/Blueprints. This has been replaced by Data/Buildings (building data) and Strings/Buildings (display names & descriptions).
Added methods to simplify common operations:
type method effect
Building CreateInstanceFromId Create a building instance from its type ID in Data/Buildings. For example:
Building shippingBin = Building.CreateInstanceFromId("Shipping Bin", Vector2.Zero); // creates an instance of StardewValley.Buildings.ShippingBin
GetData
TryGetData Get the data for the building's type from Data/Building.
GetMetadata Get a value from the Metadata field in Data/Buildings for this building.
GetPaintDataKey Get the key in Data/PaintData for this building, if it has any.
ReloadBuildingData Apply the latest data in Data/Buildings to this building.
FinishConstruction If the building is being constructed or upgrade, instantly finish doing so.
UpdateTransparency Update the building transparency on tick for the local player's position.
This method mainly exists to let mods override/patch the transparency logic.
Farm GetMainFarmHouse Get the main farmhouse building.
GameLocation OnParentBuildingUpgraded Called when the building containing this location is upgraded, if applicable.
Added building id field, which uniquely identifies each building in the world.
Junimo hut changes
The JunimoHut.cropHarvestRange field is now per-building and editable.
Fish pond changes
In Data/FishPondData, added a Precedence field which sets the order in which entries are checked for a match (with lower values checked first). This ensures that the fallback entries are checked after specific fish. For consistency, vanilla entries use these values:
precedence used for
0
(default value) specific fish
100 custom groups (e.g. desert fish)
500 broad fish type (e.g. ocean fish)
1000 fallback (e.g. fish category)
In Data/FishPondData, the reward ItemId can now be an item query.
Legendary fish can now be added to fish ponds if they have an entry in Data/FishPondData.
What's new for NPCs
Custom NPCs
See the updated docs at Modding:NPC data. The section below focuses on what's new in this version.
Custom NPC data has been overhauled in 1.6. The new Data/Characters asset replaces Data/NPCDispositions + Data/spousePatios + Data/spouseRooms with a unified data model format that's easier to edit and understand, and has a lot of fields to customize previously-hardcoded data.
See Modding:NPC data#Main data for the new format docs.
Custom NPC appearance
See the updated docs at Modding:NPC data. The section below focuses on what's new in this version.
Each NPC can now have any number of custom portraits/sprites using the new Appearance field in Data/Characters with arbitrary conditions. This lets mods add features like indoor/outdoor outfits without the performance impact of reloading textures. If multiple outfits apply, the game will choose between them with a day-stable randomization.
See Modding:NPC data#Dynamic appearances for more info.
Custom farm animals
See the updated docs at Modding:Animal data. The section below focuses on what's new in this version.
You can now create and edit farm animals by editing the revamped Data/FarmAnimals asset. This changes to a data model, adds built-in support for custom animals, and allows far more customizability per animal (like its size, growth, produce, appearance and sounds, etc).
Previously there were two spritesheet layouts depending on whether the animal lived in a barn or coop. To match the previous spritesheet layouts (e.g. to update a pre-1.6 custom animal), the options to set are:
// for barn animals
"UseFlippedRightForLeft": true,
"UseDoubleUniqueAnimationFrames": false

// for coop animals
"UseFlippedRightForLeft": false,
"UseDoubleUniqueAnimationFrames": true
Custom pets
See the updated docs at Modding:Pets. The section below focuses on what's new in this version.
You can now create and customize pets & pet breeds by editing the new Data/Pets asset.*
The pet bowl is now a building which can be constructed or moved. Each pet is assigned to an available pet bowl. For C# mods, each pet now has a guid field populated with a unique ID, and each pet bowl has a petGuid field which tracks its owner (see the PetBowl::HasPet() and PetBowl::FindPet() methods).
In the event character setup, you can now use pet to add a pet of the player's selected type. Its actor name will be PetActor in other event commands. This supersedes cat (with name Cat) and dog (with name Dog), though those still work too.
For C# mods:
All pets now use a generic Pet class, instead of Cat or Dog. The pet type is tracked by the pet's petType field.
The player's preferred pet type is tracked by Game1.player.whichPetType. The former catPerson field is now readonly and checks that field.
Added Pet.type_cat and Pet.type_dog constants for the default pet types.
Custom monster eradication goals
See the updated docs at Modding:Monster eradication goals. The section below focuses on what's new in this version.
See also: Monster eradication goal flag changes.
You can now add/edit Adventurer's Guild monster eradication goals by editing the new Data/MonsterSlayerQuests data asset.
This consists of a string → model lookup, where...
The key is a unique string ID for the monster eradication goal.
The value is a model with the fields listed below.
field effect
DisplayName A tokenizable string for the goal's display name, shown on the board in the Adventurer's Guild.
Targets A list of monster IDs that are counted towards the Count.
Count The total number of monsters (matching the Targets) which must be defeated to complete this goal.
RewardItemId (Optional) The qualified ID for the item that can be collected from Gil when this goal is completed. Default none.
RewardItemPrice (Optional) The price of the RewardItemId in Marlon's shop after the goal is completed, or -1 to disable buying it from Marlon. Default -1.
RewardDialogue
RewardDialogueFlag (Optional) A tokenizable string for custom Gil dialogue shown when talking to him after completing the goal, and an optional mail flag to set when the player has seen the dialogue. Both default to none.
If there are reward items, they're shown after this dialogue.
If RewardDialogue is used without RewardDialogueFlag, then this dialogue will be shown each time the reward menu is opened after completing the goal, until the player collects the reward items. If the RewardItems isn't set, this can safely be omitted since the goal will be marked collected immediately.
This doesn't send a letter; see RewardMail or RewardMailAll for that.
RewardFlag
RewardFlagAll (Optional) The mail flag ID to set for the current player (RewardFlag) or all players (RewardFlagAll) when talking to Gil after completing the goal. Default none.
Note that RewardFlag is usually not needed, since the game will also set a Gil_<goal ID> flag regardless.
This doesn't send a letter; see RewardMail or RewardMailAll for that.
RewardMail
RewardMailAll (Optional) The mail letter ID to add to the mailbox tomorrow for the current player (RewardMail) or all players (RewardMailAll). Default none.
CustomFields The custom fields for this entry.
Custom phone calls
See the updated docs at Modding:Phone calls. The section below focuses on what's new in this version.
Mods can now extend the telephone with custom calls (both incoming calls, and phone numbers which the player can call).
Incoming calls
You can add or customize incoming calls by editing the Data/IncomingPhoneCalls asset.
This consists of a string → model lookup, where...
The key is a unique string ID for the incoming call data.
The value is a model with the fields listed below.
field effect
Dialogue The dialogue text to show when the player answers the phone. This can use the full dialogue format (including questions and different dialogue based on the selected answer).
FromNpc (Optional) The internal name of the NPC making the call. If specified, that NPC's name and portrait will be shown.
FromPortrait (Optional) The asset name for the portrait spritesheet to display (like Portraits/Abigail). If FromNpc is specified too, this overrides the portrait from that NPC. If both FromNpc and FromDisplayName are null, this portrait will be shown with the display name "???".
FromDisplayName (Optional) A tokenizable string for the calling NPC's display name. If FromNpc is specified too, this overrides the display name from that NPC.
MaxCalls (Optional) The maximum number of times a player can receive this phone call, or -1 for no limit. Default 1.
TriggerCondition
RingCondition (Optional) If set, a game state query which indicates whether to trigger this phone call (TriggerCondition) or whether the phone rings when this call is received (RingCondition).
Whether a player receives this call depends on both fields: TriggerCondition is checked on the main player before sending the call to all players, then RingCondition is checked on each player to determine whether the phone rings for them.
IgnoreBaseChance (Optional) Whether to ignore the 1% base chance when checking whether to trigger an incoming call. If true, the game will check if this call can be received regardless of the base chance. Default false.
SimpleDialogueSplitBy (Optional, specialized) If set, marks the call as having a simple dialogue string without an NPC name and portrait, with lines split into multiple boxes by this substring. For example, "SimpleDialogueSplitBy": "#" will split Box A#Box B#Box C into three consecutive dialogue boxes.
You should omit this in most cases, and use the regular dialogue format in Dialogue to split lines if needed. This is mainly intended to support some older vanilla phone calls.
CustomFields The custom fields for this entry.
Custom handlers in C#
C# mods can implement StardewValley.PhoneCalls.IPhoneHandler and add it to Phone.PhoneHandlers for full control over both incoming and outgoing calls:
/// <summary>The mod entry point.</summary>
internal sealed class ModEntry : Mod
{
    /// <inheritdoc />
    public override void Entry(IModHelper helper)
    {
        Phone.PhoneHandlers.Add(new CustomPhoneHandler());
    }
}

/// <summary>A custom phone handler.</summary>
internal sealed class CustomPhoneHandler : IPhoneHandler
{
    ...
}
See StardewValley.PhoneCalls.DefaultPhoneHandler in the decompiled game code for an example implementation.
Custom shops
See the updated docs at Modding:Shops. The section below focuses on what's new in this version.
You can now create and edit shops via the new Data/Shops asset. See Modding:Shops for documentation and examples.
Dialogue changes
See the updated docs at Modding:Dialogue. The section below focuses on what's new in this version.
Added new dialogue keys:
asset key format description
Characters/Dialogue/<name>
AcceptBirthdayGift_<id>
AcceptBirthdayGift_<tag>
AcceptBirthdayGift_<taste>
AcceptBirthdayGift_Negative
AcceptBirthdayGift_Positive
AcceptBirthdayGift Shown when receiving a birthday gift from the player.
AcceptBouquet Shown when the NPC accepts a bouquet from the player.
AcceptGift_<id>
AcceptGift_<tag> Shown when receiving a non-birthday gift from the player. This can be by item ID (like AcceptGift_(O)128) or context tag (like AcceptGift_category_fish).
DumpsterDiveComment Shown when the NPC catches the player digging through a trash can.
HitBySlingshot Shown when the player shoots them with a slingshot.
RejectBouquet_Divorced
RejectBouquet_NotDatable
RejectBouquet_NpcAlreadyMarried
RejectBouquet_VeryLowHearts
RejectBouquet_LowHearts
RejectBouquet Shown when the NPC rejects a bouquet.
RejectGift_Divorced Shown when the NPC rejects a gift because you divorced them.
RejectItem_<id>
RejectItem_<tag> If set, the NPC will refuse to accept any matching item and show this dialogue instead. This can be by item ID (like RejectItem_(O)128) or context tag (like RejectItem_category_fish). This can prevent gifting, movie tickets, bouquets, mermaid pendants, etc. However it won't prevent accepting an item for an active quest or special order.
RejectMermaidPendant_Divorced
RejectMermaidPendant_NeedHouseUpgrade
RejectMermaidPendant_NotDatable
RejectMermaidPendant_NpcWithSomeoneElse
RejectMermaidPendant_PlayerWithSomeoneElse
RejectMermaidPendant_Under8Hearts
RejectMermaidPendant_Under10Hearts
RejectMermaidPendant_Under10Hearts_AskedAgain
RejectMermaidPendant Shown when the NPC rejects a mermaid's pendant.
RejectMovieTicket_AlreadyInvitedBySomeoneElse
RejectMovieTicket_AlreadyWatchedThisWeek
RejectMovieTicket_Divorced
RejectMovieTicket_DontWantToSeeThatMovie
RejectMovieTicket Show when the NPC rejects a movie ticket.
SpouseFarmhouseClutter Shown by an NPC spouse when they couldn't pathfind to their kitchen standing spot in the farmhouse.
SpouseGiftJealous Shown by an NPC spouse when you gave a gift to another eligible NPC of the same gender as your spouse (unless it's their birthday).
Spouse_MonstersInHouse Shown by an NPC spouse when they're in the farmhouse and there's a monster close to them.
SpouseStardrop Shown when receiving the stardrop from your spouse.
Fair_Judging Shown at the Stardew Valley Fair while Lewis is judging the grange displays.
If this is set without Fair_Judged*, the NPC will keep this dialogue after judging is done.
This replaces the previously hardcoded translations in Strings/StringsFromCSFiles: Event.cs.1602 (Marnie), Event.cs.1604 (Pierre), and Event.cs.1606 (Willy).
Fair_Judged_PlayerLost_PurpleShorts
Fair_Judged_PlayerLost_Skipped
Fair_Judged_PlayerLost
Fair_Judged_PlayerWon
Fair_Judged Shown at the Stardew Valley Fair after Lewis finishes judging the grange displays.
These replace the previously hardcoded translations in Strings/StringsFromCSFiles: Event.cs.1591 (Pierre when he won), Event.cs.1593 (Pierre when the player won), Event.cs.1595 (Marnie), Event.cs.1597 (Willy), and Event.cs.1600 (Marnie for the purple shorts).
FlowerDance_Accept_Roommate
FlowerDance_Accept_Spouse
FlowerDance_Accept Shown at the Flower Dance when the NPC agrees to dance. The game will prefer the _Roommate (if roommates) or _Spouse (if married) variant if applicable, else it'll check for the normal key.
This replaces the previously hardcoded translations in Strings/StringsFromCSFiles (Event.cs.1613, Event.cs.1615, Event.cs.1617, Event.cs.1619, Event.cs.1621, Event.cs.1623, Event.cs.1625, Event.cs.1627, Event.cs.1629, and Event.cs.1631).
FlowerDance_Decline Shown at the Flower Dance when the NPC declines to dance. This replaces the former danceRejection key (which still works as a fallback).
WinterStar_GiveGift_Before_Roommate
WinterStar_GiveGift_Before_Spouse
WinterStar_GiveGift_Before
WinterStar_GiveGift_After_Roommate
WinterStar_GiveGift_After_Spouse
WinterStar_GiveGift_After Shown at the Feast of the Winter Star when the NPC gives the player their gift (before and after the player opens it). The game will prefer the _Roommate (if roommates) or _Spouse (if married) variant if applicable, else it'll check for the normal key. If omitted, the before/after dialogues each separately default to a generic translation for all NPCs.
WinterStar_ReceiveGift_<id>
WinterStar_ReceiveGift_<tag>
WinterStar_ReceiveGift Shown at the Feast of the Winter Star when receiving their gift from the player. This can be by item ID (like WinterStar_ReceiveGift_(O)128), context tag (like WinterStar_ReceiveGift_category_fish), or for any item (like WinterStar_ReceiveGift).
WipedMemory Shown the first time you talk to the NPC after erasing their memory using the Dark Shrine of Memory.
Added new dialogue commands:
command description
${male^female}$
${male^female^non-binary}$ Change text depending on the player's gender. This largely supersedes the ^ dialogue token (which still works), and is supported in many more places than that token. This is applied before most other commands or parsing, so it can safely be used in cases where ^ might have a different meaning (e.g. mail text).
$action <action> Run a trigger action string, like $action AddMoney 500 to add 500g to the current player.
$query <query>#<if true>|<if false> Show different dialogue text depending on the game state query in <query>.
$t <topic ID> [day length] Add a conversation topic for the next [day length] days (default 4 days).
$v <event id> [check preconditions] [skip if seen] Immediately start an event and end the current dialogue, subject to the conditions.
Improved dialogue commands:
command changes
$p You can now check multiple answer IDs.
Dialogue response IDs are now unique string IDs.
Item spawn codes now use string item IDs. That means you can spawn any item using its qualified item ID (like [(F)1664] for a Mystic Rug), but can no longer prepend zeros (e.g. [128] is a pufferfish but [0128] is an error item).
For C# mods, Dialogue now tracks the translation key used to build it (when applicable). For example, you can detect when the player is rejected at the Flower Dance (derived from Three-Heart Dance Partner):
private void OnMenuChanged(object sender, MenuChangedEventArgs e)
{
    bool isDanceRejection =
        Game1.currentLocation?.currentEvent?.FestivalName == "Flower Dance"
        && e.NewMenu is DialogueBox dialogueBox
        && dialogueBox.characterDialogue is {} dialogue
        && dialogue.TranslationKey == $"Characters\\Dialogue\\{dialogue.speaker?.Name}:danceRejection";
}
For C# mods that create Dialogue instances directly, there's a few ways to do it now:
// from a translation key
var dialogue = new Dialogue(npc, "Strings\\StringsFromCSFiles:Utility.cs.5360");

// from custom text (with or without a translation key)
var dialogue = new Dialogue(npc, null, "Some arbitrary text to show as-is");

// from a translation with tokens
var dialogue = Dialogue.FromTranslation(npc, "Data\\ExtraDialogue:PurchasedItem_2_QualityLow_Willy", whatToCallPlayer, particle, i.DisplayName);
You can also easily add fallback logic using Dialogue.TryGetDialogue or npc.TryGetDialogue. For example:
Dialogue dialogue =
    npc.TryGetDialogue($"rejection_{itemId}_{locationName}_{x}_{y}")
    ?? npc.TryGetDialogue($"rejection_{itemId}_{locationName}")
    ?? npc.TryGetDialogue($"rejection_{itemId}")
    ?? new Dialogue(npc, "Strings\\StringsFromCSFiles:NPC.cs.3971");
For C# mods, added a dialogue.sideEffects field to run code when the dialogue is displayed.
The 'reveal taste' dialogue command now uses the format %revealtaste:<npc name>:<item ID> to support item IDs. (The previous %revealtaste<npc name><item index> format still works to support old content packs, but the item index can only be a number.)
NPCs no longer override the portrait for a gift taste dialogue that uses a portrait command explicitly.
Fixed unknown dialogue commands starting with $ being parsed as a portrait number when not numeric.
Fixed NPCs only using a {day name}{hearts}_{year} dialogue if they also have a {day name}{hearts} one.
Fixed NPCs only using the MovieInvitation dialogue key in English.
Schedule changes
See the updated docs at Modding:Schedule data. The section below focuses on what's new in this version.
Schedule keys are now case-insensitive.
Added a new <day of week>_<min hearts> schedule key.
Added an NPC.ScheduleKey field which always matches their loaded schedule.
Schedule commands now trim surrounding whitespace, so they can be multilined for readability. For example:
"Wed": "
    1000 ArchaeologyHouse 11 9 0/
    1800 Town 47 87 0/
    2200 SeedShop 1 9 3 abigail_sleep
"
Removed an unintended schedule fallback to a {season}_spring_{hearts} key. It'll skip to the spring default instead.
Schedules are now fault-tolerant:
Fixed crash if a selected schedule can't be parsed. The NPC now logs an error and continues with the next fallback instead.
Fixed crash if certain hardcoded schedules aren't present (like Penny's marriageJob or Pam's bus).
Fixed error if a schedule command is empty.
Other NPC changes
These docs should be merged into Modding:NPC data as needed. When copying content, make sure you attribute the original authors.
Added Game1.characterData and Game1.farmAnimalData to read NPC/animal info without constantly reloading the Data/Characters or Data/FarmAnimals asset.
All translated NPC names are now in Strings/NPCNames.
Added new fields & methods for C# mods:
type field/method effect
AdventureGuild IsComplete(data) Get whether an Adventurer's Guild monster eradication goal has been completed, regardless of whether the player collected its rewards yet.
HasCollectedReward(player, id) Get whether a given player has completed an Adventurer's Guild monster eradication goal and collected its rewards. For example:
bool isPhoneUnlocked = AdventureGuild.HasCollectedReward(Game1.player, "Gil_FlameSpirits");
AnimalHouse adoptAnimal Add an animal to this location and set the location as the animal's home.
AnimatedSprite Owner The NPC which owns the sprite.
Character IsVillager Whether this is an NPC-type villager (i.e. not a monster, horse, pet, player's child, etc). In other words, this checks whether the NPC would use data from Data/Characters (regardless of whether they currently have an entry in the asset).
StandingPixel The character's cached pixel position within the current location, based on the center pixel of their bounding box.
Tile
TilePoint The character's cached tile position within their current location. Tile is their exact non-integer position, and TilePoint is their integer tile position.
FarmAnimal isAdult Get whether the farm animal is fully grown (opposite of isBaby()).
CanGetProduceWithTool Get whether the farm animal's produce can be collected with a given tool (e.g. milk pail for a cow).
CanLiveIn Get whether the animal can be added to a building.
GetDisplayName
GetShopDescription Get the translated display name or shop description for this animal.
GetHarvestType Get whether the animal's produce is dropped or collected with a tool.
growFully Instantly age the animal to adulthood if it's still a baby.
ReloadTextureIfNeeded Update the animal sprite based on the current state + data.
Farmer GetDisplayPants
GetDisplayShirt Get the texture and sprite index to draw for the player's pants or shirt. This accounts for override clothing, worn clothing, and the default clothing drawn when the farmer isn't wearing anything.
For example:
Game1.player.GetDisplayShirt(out Texture2D texture, out int spriteIndex);
CanDyePants
CanDyeShirt Get whether the currently equipped pants or shirt can be dyed.
Monster GetDisplayName(name) Get the translated display name for a monster type.
NPC CanReceiveGifts Get whether this NPC can receive gifts from the player (regardless of whether they've already received one today).
GetData
NPC.TryGetData Get the underlying data from Data/Characters for this NPC, if any.
NPC.GetDisplayName(name) Get the translated display name in the current language for an NPC by their internal name.
hasDarkSkin Whether this character has dark skin for the purposes of child genetics.
Pet GetPetData
TryGetData Get the underlying data from Data/Pets for this pet, if any.
ShopMenu ShopId A key which identifies the current shop. This may be the unique shop ID in Data/Shops for a standard shop, Dresser or FishTank for furniture, etc. This is guaranteed to be set to a relevant shop ID.
This replaces the former shopContext field, and will usually have the same value in cases where that was set to a unique shop ID.
Utility getAllVillagers Get all villager NPCs (excluding horses, pets, monsters, player children, etc). This works just like getAllCharacters with an added filter.
NPCs now update on save loaded when their home data changes.
NPC.reloadSprite() now has an argument to only reload the appearance, without changing other data.
Utility.getAllCharacters() now returns a plain List<NPC> value instead of a custom DisposableList<NPC>, so you can use normal LINQ querying on it.
Utility.GetHorseWarpRestrictionsForFarmer(player) now returns an enum (which is more efficient and easier for mods to patch), and added a new Utility.GetHorseWarpErrorMessage(restrictions) method to get the error message to show for it.
Farmer.hasAFriendWithHeartLevel now has an optional max-hearts argument.
Removed most FarmAnimal fields/properties which just mirror the underlying data.
Removed invalid item IDs in Data/NPCGiftTastes.
Fixed NPCs sometimes duplicated on save load (particularly if their home location changed).
Fixed child NPCs like Jas or Vincent ignoring relative titles like "mom" in Data/NPCDispositions (now Data/Characters) for reveal-gift-taste dialogues.
Fixed custom NPCs ignoring dialogue when they use a subclass of NPC.
Fixed monsters not loading their display name from Data/Monsters for English players.
Fixed player children not applying the IsInvisible flag.
What's new for everything else
Buff overhaul
See the updated docs at Modding:Buffs. The section below focuses on what's new in this version.
See also: custom buffs.
1.6 rewrites buffs to work more consistently and be more extensible:
Buff logic is unified into Game1.player.buffs, which is the single source of truth for buff data. This replaces the previous player.added* and player.appliedBuffs fields, BuffsDisplay logic, enchantment stat bonuses, and boots/ring attribute changes on (un)equip.
This also removes limitations on buff types (e.g. buffs can add weapon bonuses and weapons can add attribute buffs) and buffable equipment (e.g. equipped tools can have buffs too).
Buff effects are now fully recalculated when they change, to fix a range of longstanding bugs like attribute drift and double-debuffs. Just like before, the buffs are managed locally; only the buff IDs and aggregate attribute effects are synced.
For C# mods:
Each buff now has a unique string ID. You can apply a new buff with the same ID to replace it (so you no longer need to manually find and remove previous instances of the buff).
The buff duration can now be set to Buff.ENDLESS to remove the duration. It'll last all day until the player sleeps.
You can add standard buff effects to any equipment by overriding Item.AddEquipmentEffects, or add custom behaviour/buffs by overriding Item.onEquip and Item.onUnequip.
You can add custom food or drink buffs by overriding Item.GetFoodOrDrinkBuffs().
The Buff constructor now supports a custom icon texture, sprite index, display name, description, and millisecond duration to fully support custom buffs.
You can change how buff attributes are displayed (or add new attributes) by extending the BuffsDisplay.displayAttributes list.
You can have invisible buffs by setting buff.visible = false.
For example, here's how to add a custom buff which adds +3 speed:
Buff buff = new Buff(
    id: "Example.ModId_ZoomZoom",
    displayName: "Zoom Zoom", // can optionally specify description text too
    iconTexture: this.Helper.ModContent.Load<Texture2D>("assets/zoom.png"),
    iconSheetIndex: 0,
    duration: 30_000, // 30 seconds
    effects: new BuffEffects()
    {
        Speed = { 10 } // shortcut for buff.Speed.Value = 10
    }
);
Game1.player.applyBuff(buff);
You can also implement your own custom effects in code by checking if the buff is active, like Game1.player.hasBuff("Example.ModId_ZoomZoom").
Custom audio
See the updated docs at Modding:Audio. The section below focuses on what's new in this version.
You can now add or edit music tracks or sound effects by editing the new Data/AudioChanges asset. New cues are added to the game's soundbank, so they can be used anywhere normal audio can be used (e.g. the Music map property). This supports .ogg and .wav files, and the vanilla audio features (e.g. randomizing audio from one ID).
Audio is also more fault-tolerant in 1.6: the game no longer crashes when playing audio which doesn't exist, it now logs an error and returns a default quiet click sound instead. (If you use try..catch to check if an audio cue exists, you should check Game1.soundbank.Exists(name) instead.)
Custom buffs
See the updated docs at Modding:Buffs. The section below focuses on what's new in this version.
See also: buff overhaul.
You can now define custom buffs by editing the new Data/Buffs asset. You can then use the buff from other places like Data/Object's Buff field or the C# Buff constructor.
Custom data fields
See the updated docs at Modding:Common data field types#Custom fields. The section below focuses on what's new in this version.
Many data assets now have a CustomFields field. This is ignored by the game, but lets mods add their own data (e.g. to enable mod framework features).
For example, a content pack can add a crop with custom fields:
{
    "Format": "2.5.0",
    "Changes": [
        {
            "Action": "EditData",
            "Target": "Data/Crops",
            "Entries": {
                "Example.Id_CucumberSeeds": {
                    "Seasons": [ "summer" ],
                    "DaysInPhase": [ 1, 2, 2, 2 ],
                    "HarvestItemId": "Example.Id_Cucumber",
                    "Texture": "{{InternalAssetKey: assets/crops.png}}",
                    "SpriteIndex": 0,

                    "CustomFields": {
                        "Example.FrameworkMod/WetTexture": "{{InternalAssetKey: assets/crops-wet.png}}"
                    }
                }
            }
        }
    ]
}
And then a C# mod could handle the custom field if it's set:
if (Game1.currentLocation.IsRainingHere())
{
    CropData data = crop.GetData();
    if (data != null && data.CustomFields.TryGetValue("Example.FrameworkMod/WetTexture", out string textureName))
    {
        // do magic
    }
}
See CustomFields in the docs for each asset type to see if it's supported. Besides the sections listed on this page, custom fields were also added to Data/AdditionalFarms, Data/AdditionalLanguages, Data/FishPondData, Data/HomeRenovations, Data/Movies, and Data/SpecialOrders.
See Modding:Common data field types#Custom fields for the main docs.
Custom giant crops
These docs should be merged into a new doc page. When copying content, make sure you attribute the original authors.
You can now add/edit giant crops by editing the Data/GiantCrops data asset.
This consists of a string → model lookup, where...
The key is a unique string ID for the giant crop.
The value is a model with the fields listed below.
field effect
FromItemId The item ID (qualified or unqualified) for the harvest ID of the regular crop which can turn into this giant crop. For example, (O)254 is melon.
Any number of giant crops can use the same FromItemId value. The first giant crop whose other fields match (if any) will spawn.
HarvestItems The items which can be dropped when you break the giant crop. If multiple items match, they'll all be dropped.
This consists of a list of models with these fields:
field effect
common fields See item spawn fields for the generic item fields supported for harvest items.
If set to an item query which returns multiple items, one of them will be selected at random.
Chance (Optional) The probability that this entry is selected, as a value between 0 (never drops) and 1 (always drops). Default 1 (100% chance).
ForShavingEnchantment (Optional) Whether this item is only dropped for Shaving enchantment drops (true), only when the giant crop is broken (false), or both (null). Default both.
ScaledMinStackWhenShaving
ScaledMaxStackWhenShaving (Optional) If set, the min/max stack size when this item is dropped due to the shaving enchantment, scaled to the tool's power level.
This value is multiplied by the health deducted by the tool hit which triggered the enchantment. For example, an iridium axe which reduced the giant crop's health by 3 points will produce three times this value per hit.
If both fields are set, the stack size is randomized between them. If only one is set, it's applied as a limit after the generic fields. If neither is set, the generic MinStack/MaxStack fields are applied as usual without scaling.
Texture The asset name for the texture containing the giant crop's sprite.
TexturePosition (Optional) The top-left pixel position of the sprite within the Texture, specified as a model with X and Y fields. Defaults to (0, 0).
TileSize (Optional) The area in tiles occupied by the giant crop, specified as a model with X and Y fields. This affects both its sprite size (which should be 16 pixels per tile) and the grid of crops needed for it to grow. Note that giant crops are drawn with an extra tile's height. Defaults to (3, 3).
Health (Optional) The health points that must be depleted to break the giant crop. The number of points depleted per axe chop depends on the axe power level. Default 3.
Chance (Optional) The percentage chance that a given grid of crops will grow into the giant crop each night, as a value between 0 (never) and 1 (always). Default 0.01 (1%).
Note that the chance is checked for each giant crop that applies. If three giant crops each have a 1% chance of spawning for the same crop, then there's a 3% chance that one of them will spawn.
Condition (Optional) A game state query which indicates whether this giant crop is available to spawn. Defaults to always true.
CustomFields The custom fields for this entry.
Custom jukebox tracks
These docs should be merged into a new doc page. When copying content, make sure you attribute the original authors.
You can now change jukebox audio tracks by editing the new Data/JukeboxTracks data asset.
This consists of a string → model lookup, where...
The key is the audio cue ID to play (case-sensitive).
The value is a model with the fields listed below.
If the player has heard a music track not listed in Data/JukeboxTracks, it's automatically available with the title set to the cue name. To disable a track, add an entry with "Available": false.
field effect
Name (Optional) A tokenizable string for the music track's in-game title. Defaults to the ID.
Available (Optional) Whether the track should be shown in the jukebox menu. This can be true (always shown), false (never shown), or null (show if the player has heard it before). Default null.
Tracks with "Available": true are listed first in the jukebox menu.
AlternativeTrackIds (Optional) A list of other cue names for this audio track (not case-sensitive). If the player has heard any of these track IDs, this entry is available in the menu. Default none.
For example, this can be used when renaming a track to keep it unlocked for existing players:
"{{ModId}}_TrackName": {
    "Name": "{{i18n: track-name}}",
    "AlternativeTrackIds": [ "OldTrackName" ]
}
Custom movies
These docs should be merged into Modding:Movie theater data. When copying content, make sure you attribute the original authors.
See also: custom movie concessions.
Movie data was previously very limited and prone to mod conflicts, since (a) we needed incrementing movie IDs like spring_movie_3, (b) we were limited to one movie per season, and (c) all sprites for each movie had to be in the vanilla LooseSprites/Movies spritesheet.
Stardew Valley 1.6 revamps how movies work to address those limitations.
Movie selection
Movies were previously selected based on a specific ID pattern: spring_movie_0 would play in spring the year you built the movie theater, spring_movie_1 would play in spring the next year, etc. That meant it'd take two in-game years to see the first custom movie, and ID conflicts had to be managed manually.
In 1.6, we can now have multiple movies per month based on the new fields listed below. If multiple movies can play in the same season, each movie will be shown for an equal block of days within the month (e.g. four movies will each play for seven consecutive days). If there are more movies than days, 28 movies will be chosen at random to play that month.
New data fields
field effect
Seasons (Optional) The seasons when the movie should play, or omit for any season. For example:
"Seasons": [ "Spring", "Summer" ]
YearModulus
YearRemainder (Optional) If set, plays the movie on alternating years based on the formula theater_age % modulus == remainder, where theater_age is the number of years since the movie theater was built. If omitted, the movie plays in any year.
For example:
// play in the first year, and every second year thereafter
"YearModulus": 2,
"YearRemainder": 0
// play in the second year, and every second year thereafter
"YearModulus": 2,
"YearRemainder": 1
Texture (Optional) The asset name for the movie poster and screen images, or omit to use LooseSprites\Movies.
This must be a spritesheet with one 490×128 pixel row per movie. A 13×19 area in the top-left corner of the row should contain the movie poster. With a 16-pixel offset from the left edge, there should be two rows of five 90×61 pixel movie screen images, with a six-pixel gap between each image. (The movie doesn't need to use all of the image slots.)
CranePrizes (Optional) The items to add to the crane game prize pool on days when this movie is playing, if any.
This consists of a list of models with these fields:
field effect
common fields See item spawn fields for the generic item fields supported for ammo items.
If set to an item query which returns multiple items, one of them will be selected at random.
Rarity (Optional) The prize pool to add the item to. The possible values are 1 (common), 2 (rare), and 3 (deluxe). Default 1.
ClearDefaultCranePrizeGroups (Optional) The prize pools whose default items to discard, so only those specified by CranePrizes are available. Default none.
For example:
"ClearDefaultCranePrizeGroups": [ 2, 3 ]
Other changes
Data/Movies, Data/Concessions, and Data/MoviesReactions no longer have language variants. Instead translations were moved into Strings/* assets, and the data assets use tokenizable strings to get text.
Data/Movies is now a list instead of a dictionary. The order determines the order movies are shown within a season. Content packs can edit them the same way as before.
Added a debug movieSchedule [year] command to help troubleshoot movie selection.
Added methods for C# mods: MovieTheater.GetMovieToday(), GetUpcomingMovie(), and GetUpcomingMovie(afterDate).
For example, this content pack adds a new 'Pufferchick II' movie which plays in winter every third year:
{
    "Format": "2.5.0",
    "Changes": [
        {
            "Action": "EditData",
            "Target": "Data/Movies",
            "Entries": {
                "{{ModId}}_PufferchickII": {
                    "Id": "{{ModId}}_PufferchickII", // must specify ID again when creating a new entry

                    "Seasons": [ "winter" ],
                    "YearModulus": 3,
                    "YearRemainder": 0,

                    "Title": "Pufferchick II", // display text should usually use {{i18n}} for translations in actual usage
                    "Description": "A sequel to the breakthrough adventure anime Pufferchick. The world is saved; what happens next?",
                    "Tags": [ "family", "adventure" ],

                    "Texture": "{{InternalAssetKey: assets/movie.png}}", // an image in your content pack
                    "SheetIndex": 0,

                    "Scenes": [ ... ]
                }
            }
        }
    ]
}
Custom wedding event
These docs should be merged into a new doc page. When copying content, make sure you attribute the original authors.
The wedding event can now be changed by editing the Data\Weddings data asset, which consists of a data model with two relevant fields (listed below).
field effect
EventScript The event scripts which play the wedding. The game will use the script for the spouse NPC/player if it exists, otherwise it'll use the default script.
This consists of a string → string dictionary, where...
The key is an NPC internal name (like Abigail), unique player ID, or default for the default script (which handles marrying either an NPC or player);
The value is a tokenizable strings for the event script to play.
The event scripts also have access to three extra tokens:
token effect
[SetupContextualWeddingAttendees] The concatenated Setup values for each of the Attendees present in the wedding.
[ContextualWeddingCelebrations] The concatenated Celebration values for each of the Attendees present in the wedding.
[SpouseActor] The actor ID for the NPC or other player being married (like Abigail for an NPC or farmer2 for a player). This can be used in event commands like faceDirection [SpouseActor] 1.
(You can also use spouse as an actor ID, but that will only work when marrying an NPC.)
Attendees The other NPCs which should attend the wedding (unless they're the spouse). This consists of a string → model lookup, where the key is the internal NPC name, and the value is a model with these fields:
field effect
ID The internal NPC name.
Setup The NPC's tile position and facing direction when they attend. This is equivalent to field index 2 in the event basic data.
Celebration (Optional) The event script to run during the celebration, like faceDirection Pierre 3 true which makes Pierre turn to face left. This can contain any number of script commands.
Condition (Optional) A game state query which indicates whether the NPC should attend. Defaults to true.
IgnoreUnlockConditions (Optional) Whether to add the NPC even if their entry in Data/Characters has an UnlockConditions field which doesn't match. Default false.
Game state queries
See the updated docs at Modding:Game state queries. The section below focuses on what's new in this version.
A game state query is a new vanilla way to specify conditions for some content like shop data, inspired by Content Patcher's conditions.
Gender changes
These docs should be merged into Modding:Dialogue. When copying content, make sure you attribute the original authors.
Added an inline gender-switch token to change text depending on the player's gender. This reduces duplicate text, works in more places than the ^ dialogue token, works in mail and other places where ^ has a different meaning, and supports non-binary gender.
For C# mod authors, added a unified Gender field for players and NPCs with the possible values Male, Female, and Unspecified. This replaces Farmer.isMale and the numeric NPC gender constants. Note that vanilla still only sets players to male or female, though mods can override it.
Gender-specific clothing variants can now be worn by any gender.
Removed French-only support for using ^ dialogue token in non-dialogue text. This is superseded by the new inline gender-switch command.
Item queries
See the updated docs at Modding:Item queries. The section below focuses on what's new in this version.
Item queries are a new built-in way to choose one or more items dynamically, instead of specifying a single item ID. These are used in various places like machine data and shop data.
For example, a shop can sell a random house plant using the RANDOM_ITEMS query:
{
    "ItemId": "RANDOM_ITEMS (F) 1376 1390",
    "MaxItems": 1
}
Item spawn fields
See the updated docs at Modding:Item queries#Item spawn fields. The section below focuses on what's new in this version.
Several data assets (like machines and shops) let you configure items to create using item queries. For consistency, these all share a set of common fields.
Color fields
See the updated docs at Modding:Common data field types#Color. The section below focuses on what's new in this version.
1.6 adds a standardized color format used in various data fields. This can be a color name, hexadecimal color code, or 8-bit RGB color code.
For example, you can set debris color in Data/WildTrees:
"DebrisColor": "White"
modData field changes
The modData fields are dictionaries of arbitrary string values which are synchronized in multiplayer and persisted in the save file, so mods can store custom data about the instances. The game already has the field for buildings, characters (including NPCs and players), items, locations, and terrain features.
Stardew Valley 1.6...
Adds modData fields to the Crop, Projectile, and Quest types too.
Moves ModDataDictionary into the StardewValley.Mods namespace.
Fixes Item.modData not copied when performing special equipment replacement (e.g. for the copper pan work as a hat).
Quantity modifiers
See the updated docs at Modding:Common data field types#Quantity_modifiers. The section below focuses on what's new in this version.
Quantity modifiers apply dynamic changes to a numeric field in a data asset like Data/Shops or Data/Machines. For example, you can multiply a shop item's price or increase a machine output's quality. You can specify any number of modifiers for the same field.
Tokenizable string format
See the updated docs at Modding:Tokenizable strings. The section below focuses on what's new in this version.
Stardew Valley 1.6 adds tokenizable strings, which support any combination of literal text and token values. That includes a set of built-in tokens like FarmName, LocalizedText, etc.
For example, previously you often needed to load text from a translation key. With this new format, you can use the literal text directly in the asset instead (including Content Patcher tokens):
// before
"Dialogue": "Strings\\StringsFromCSFiles:ShopMenu.cs.11488",

// after: any combination of literal text and tokens
"Dialogue": "Welcome to Pierre's, {{PlayerName}}! How is [FarmName] doing?",
Tokenizable strings are only usable in specific fields (as indicated in their wiki or code docs).
See Modding:Tokenizable strings for usage.
Event changes
These docs should be merged into Modding:Event data. When copying content, make sure you attribute the original authors.
High-level changes
Event IDs are now unique string IDs, so mods can use a unique key instead of hoping no other mod uses the same number. Unconditional events must have an empty precondition in their key (like "Example.ModId_EventName/") to distinguish them from forks.
Event/festival commands with a direction argument now allow both case-insensitive names (like up) and numeric values.
Event script errors are now logged (in addition to being shown in the chatbox like before).
For C# mods:
You can now add custom event preconditions & commands using new Event methods (RegisterPrecondition, RegisterPreconditionAlias, RegisterCommand, and RegisterCommandAlias).
Added Event.fromAssetName, which indicates which data asset (if any) the event was loaded from.
Added Game1.eventsSeenSinceLastLocationChange to track the events that played since the player arrived in their current location.
Precondition changes
See the updated docs at Modding:Event_data#Event_preconditions. The section below focuses on what's new in this version.
Added validation for preconditions. If a format or assumption is invalid, the game now logs a detailed error.
Added case-insensitive readable names for all preconditions.
Event & preconditions are now quote-aware, so you can escape spaces and slashes in arguments.
Added new preconditions and made some old ones more flexible.
Command changes
Added validation for event commands. If a format or assumption is invalid, the game now logs a detailed error and (if applicable) skips the command, instead of crashing or silently ignoring it. This also means event arguments are stricter (e.g. you can no longer set a true/false field to an invalid value, inner quotes in quoted arguments now need to be escaped, etc).
Event commands are now quote-aware, so you can escape spaces and slashes in arguments like /speak "I'm running A/B tests"/.
Event commands now trim surrounding whitespace, so they can be multilined for readability. Line breaks must be before or after the / delimiter. For example:
"SomeEventId/": "
    none/
    -1000 -1000/
    farmer 5 7 0/
    ...
"
This can be also combined with the comment syntax to add notes. (Reminder: comments can't be used between the first three commands). For example:
"SomeEventId/": "
    none/            
    -1000 -1000/     
    farmer 5 7 0/    -- actor positions/
    ...
"
You can now mark NPCs optional in event commands by suffixing their name with ?. For example, jump Kent? won't log an error if Kent is missing. When used in the initial event positions, the NPC is only added in they exist in Data/Characters and their UnlockConditions match.
Added new event commands:
command description
action <action> Run a trigger action string, like action AddMoney 500 to add 500g to the current player.
addItem <item ID> [count] [quality] Add an item to the player inventory (or open a grab menu if their inventory is full). The <item ID> is the qualified or unqualified item ID, and [quality] is a numeric quality value.
addSpecialOrder <order ID>
removeSpecialOrder <order ID> Add or remove a special order to the player team. This affects all players, since special orders are shared.
eventSeen <event ID> [seen] Add or remove an event ID from the player's list of seen events, based on [seen] (default true to add).
An event can mark itself unseen using eventSeen <event ID> false. This takes effect immediately (i.e. the event won't be added to the list when it completes), but the game will prevent the event from playing again until the player changes location to avoid event loops. The event will still replay when re-entering the location.
mailToday <mail key> Adds a letter to the mailbox immediately, given the <mail key> in Data/Mail.
questionAnswered <answer ID> [answered] Add or remove an answer ID from the player's list of chosen dialogue answers, based on [answered] (default true to add).
replaceWithClone <NPC name> Replace an NPC already in the event with a temporary copy. This allows changing the NPC for the event without affecting the real NPC.
For example, this event changes Marnie's name/portrait only within the event:
"Some.ModId_ExampleEvent/": "continue/64 15/farmer 64 15 2 Marnie 64 17 0/replaceWithClone Marnie/changeName Marnie Pufferchick/changePortrait Marnie Pufferchick/[...]/end"
setSkipActions [actions] Set trigger actions that should run if the player skips the event. You can list multiple actions delimited with #, or omit [actions] so no actions are run. When the player skips, the last setSkipActions before that point is applied.
For example, this adds the garden pot recipe and item to the player if the event is skipped, but avoids adding the item if the event already did it:
/setSkipActions AddCraftingRecipe Current "Garden Pot"#AddItem (BC)62
/skippable
/...
/addItem (BC)62
/setSkipActions AddCraftingRecipe Current "Garden Pot"
Skip actions aren't applied if the event completes normally without being skipped.
stopSound <sound ID> [immediate] Stop a sound started with the startSound command. This has no effect if the sound has already stopped playing on its own (or hasn't been started). If you started multiple sounds with the same ID, this will stop all of them (e.g. startSound fuse/startSound fuse/stopSound fuse).
By default the sound will stop immediately. For looping sounds, you can pass false to the [immediate] argument to stop the sound when it finishes playing the current iteration instead (e.g. stopSound fuse false).
temporaryAnimatedSprite ... Add a temporary animated sprite to the event, using these space-delimited fields:
index field effect
0 texture The asset name for texture to draw.
1–4 rectangle The pixel area within the texture to draw, in the form <x> <y> <width> <height>.
5 interval The millisecond duration for each frame in the animation.
6 frames The number of frames in the animation.
7 loops The number of times to repeat the animation.
8–9 tile The tile position at which to draw the sprite, in the form <x> <y>.
10 flicker Causes the sprite to flicker in and out of view repeatedly. (one of true or false).
11 flip Whether to flip the sprite horizontally when it's drawn (one of true or false).
12 sort tile Y The tile Y position to use in the layer depth calculation, which affects which sprite is drawn on top if two sprites overlap. The larger the number, the higher layer the sprite is on.
13 alpha fade Fades out the sprite based on alpha set. The larger the number, the faster the fade out. 1 is instant.
14 scale A multiplier applied to the sprite size (in addition to the normal 4× pixel zoom).
15 scale change Changes the scale based on the multiplier applied on top of the normal zoom. Continues endlessly.
16 rotation The rotation to apply to the sprite, measured in radians.
17 rotation change Continuously rotates the sprite, causing it to spin. The speed is determined by input value.
18+ flags Any combination of these space-delimited flags:
color <color>: apply a standard color to the sprite.
hold_last_frame: after playing the animation once, freeze the last frame as long as the sprite is shown.
ping_pong: Causes the animation frames to play forwards and backwards alternatingly. Example: An animation with the frames 0, 1, 2 will play "0 1 2 0 1 2" without the ping_pong flag and play "0 1 2 1 0" with the ping_pong flag.
motion <x> <y>: Sprite moves based on the values set. Numbers can be decimals or negative.
acceleration <x> <y>: [TODO: document what this does]
acceleration_change <x> <y>: [TODO: document what this does]
translateName <actor> <translation key> Set the display name for an NPC in the event to match the given translation key.
warpFarmers [<x> <y> <direction>]+ <default offset> <default x> <default> <direction> Warps connected players to the given tile coordinates and numeric directions. The <x> <y> <direction> triplet is repeated for each connected player (e.g. the first triplet is for the main player, second triplet is for the first farmhand, etc). The triplets are followed by an offset direction (one of up, down, left, or right), and a final triplet which defines the default values used by any other player.
Fixed some commands assuming a boolean argument is true if present, regardless of its value. This affects the changeToTemporaryMap, emote, extendSourceRect, faceDirection, globalFade, globalFadeToClear, positionOffset, and warp commands.
Fixed some commands assuming any value except the exact case-sensitive string true is false. This affects the animate, glow, hideShadow, ignoreMovementAnimation, temporaryAnimatedSprite, temporarySprite, and viewport commands.
Fixed some commands silently ignoring values they can't parse as the expected type. This affects the addItem, makeInvisible, and removeItem commands.
Fixed crash when some commands are passed farmer[number] for a player who's not available, or farmer[number] when they expect farmer.
Fixed some commands not taking into account custom farmer actors when checking farmer* actor IDs.
Fixed warp-out event commands able to use NPC-only or gendered warps. They now use a valid warp for the player if possible.
Changed specific commands:
command changes
addCookingRecipe Fixed error if player already knows the recipe.
addMailReceived
Renamed to mailReceived. (The old name is now an alias, so it'll still work.)
You can now remove a mail received by setting the optional third argument to false, like mailReceived <id> false.
addTemporaryActor
Underscores in the asset name are now only replaced with spaces if an exact match wasn't found. You should quote arguments containing spaces instead, like addTemporaryActor "White Chicken" ….
Underscores in the display name are no longer replaced with spaces. You should quote arguments containing spaces instead.
Argument 9 ([animal name]) is now [override name], and can be used to set the name for non-animals too.
animate Underscores in the NPC name are now only replaced with spaces if an exact match wasn't found. You should quote arguments containing spaces instead, like animate "Mr Qi" ….
ambientLight Removed four-argument form (which was unused and had confusing behavior). The other versions of ambientLight still work like before.
awardFestivalPrize Added support for arbitrary item IDs, like awardFestivalPrize (O)128 for a pufferfish.
changeLocation It now updates the event position offset if needed.
changeName Underscores in the NPC name are no longer replaced with spaces. You should quote arguments containing spaces instead, like changeName Leo "Neo Leo".
changePortrait
changeSprite You can now omit the suffix argument to reset the NPC back to their normal portrait/sprite.
faceDirection You can now specify the direction in words, like faceDirection up
ignoreMovementAnimation
Fixed its ignore argument being ignored.
Underscores in the NPC name are now only replaced with spaces if an exact match wasn't found. You should quote arguments containing spaces instead, like ignoreMovementAnimation "Mr Qi" ….
itemAboveHead Added support for arbitrary item IDs, like itemAboveHead (O)128 for a pufferfish.
makeInvisible Fixed terrain features not hidden when using the default area size.
playSound Sounds started via playSound now stop automatically when the event ends.
removeItem Added argument for an optional count, like removeItem (O)128 10 to remove 10 pufferfish.
speak Fixed friendship & socialize quest not updated when calling it with a translation key.
Removed some commands:
command changes
addToTable Removed (it was unused and worked in counterintuitive ways).
addTool Removed (it was unused and only supported the return scepter). Use addItem instead, which supports adding tools.
grabObject Removed (it was unused and broken).
showRivalFrame
taxVote Removed (they were part of unimplemented features).
weddingSprite Removed (it was broken and unused).
Festival changes
Festivals can now have a custom festival-started notification message by setting the startedMessage field in Data/Festivals/* to a tokenizable string.
Festivals now set the event ID to a value like festival_fall16, instead of -1.
All in-festival data fields now support year variants.
Fixed NPCs getting duplicated in festivals if they're added to the set-up fields multiple times. Subsequent entries now move them instead.
Fixed year variants for festival set-up field being appended to the main script instead of replacing it.
Send-mail (x) precondition deprecated
Using the x event precondition as a way to send mail is now deprecated (but still works). You should use trigger actions instead to perform actions like that.
All vanilla events which used it have been replaced by equivalent trigger actions. This event IDs below no longer exist; if you check them (e.g. via HasSeenEvent), you'll need to check the new action or the mail flag they set instead.
old event ID new action ID mail flag
68 Mail_Mom_5K mom1
69 Mail_Mom_15K mom2
70 Mail_Mom_32K mom3
71 Mail_Mom_120K mom4
72 Mail_Dad_5K dad1
73 Mail_Dad_15K dad2
74 Mail_Dad_32K dad3
75 Mail_Dad_120K dad4
76 Mail_Tribune_UpAndComing newsstory
706 Mail_Pierre_Fertilizers fertilizers
707 Mail_Pierre_FertilizersHighQuality fertilizers2
909 Mail_Robin_Woodchipper WoodChipper
2111194 Mail_Emily_8heart EmilyClothingTherapy
2111294 Mail_Emily_10heart EmilyCamping
2346091 Mail_Alex_10heart joshMessage
2346092 Mail_Sam_10heart samMessage
2346093 Mail_Harvey_10heart harveyBalloon
2346094 Mail_Elliott_10heart elliottBoat
2346095 Mail_Elliott_8heart elliottReading
2346096 Mail_Penny_10heart pennySpa
2346097 Mail_Abigail_8heart abbySpiritBoard
3333094 Mail_Pierre_ExtendedHours pierreHours
3872126 Mail_Willy_BackRoomUnlocked willyBackRoomInvitation
Mail changes
These docs should be merged into Modding:Mail data. When copying content, make sure you attribute the original authors.
Mail can now have multiple items attached (using multiple %item commands). When the player grabs the top item, the next one will appear in the slot to grab next.
Added mail commands:
command effect
%action <action>%% Run a trigger action string, like %action AddMoney 500%% to add 500g to the current player.
Improved mail commands:
command changes
%item
Added %item id <item id> [count] form which accepts a qualified or unqualified item ID. If multiple items are listed (e.g., %item id (BC)12 3 (O)34 5 %%) one set will be picked randomly. This deprecates the bigobject, furniture, object, and tools options.
Added %item specialOrder <order id> [immediately] form to attach a special order to the letter.
Added optional <key> argument to %item cookingRecipe <key>, to learn a specific cooking recipe. The previous %item cookingRecipe form (without a key) works the same way as before.
The type argument is now case-insensitive.
Fixed %item craftingRecipe not supporting recipe IDs containing underscores. It now checks for an exact match first, then tries replacing underscores with spaces like before, then logs a warning if neither was found instead of adding an invalid recipe.
All wallet items are now tracked via mail flags. That adds these mail flags: HasClubCard, HasDarkTalisman, HasDwarvishTranslationGuide, HasMagicInk, HasMagnifyingGlass, HasRustyKey, HasSkullKey, HasSpecialCharm, HasTownKey, and HasUnlockedSkullDoor.
Fixed letter viewer error when opening an invalid letter.
Stat changes for C# mods
The tracked stats API (e.g. Game1.stats and Game1.player.stats) has been overhauled.
In particular, all stats are now in the underlying stat dictionary. If you use a stat field directly (like stats.dirtHoed), you'll need to use the property (like stats.DirtHoed) or method (like stats.Get(StatsKey.DirtHoed)). This lets the game or mods access all stats in a standard way without reflection. 1.6 also adds StatsKey constants for all stats tracked by the game.
The stats API has also been redesigned:
member comments
Values The numeric metrics tracked by the game. This replaces stats_dictionary.
Get(key) Get the value of a tracked stat. This replaces getStat.
For example:
uint daysPlayed = Game1.stats.Get(StatKeys.DaysPlayed);
Set(key, value) Set the new value of a tracked stat. This method is new.
For example:
Game1.stats.Set(StatKeys.ChildrenTurnedToDoves, 5);
Increment(key)
Increment(key, amount) Add the given amount to the stat (default 1), and return the new stat value. This improves on the original incrementStat.
For example:
uint stepsTaken = Game1.stats.Increment(StatKeys.StepsTaken);
This can also be used to track custom mod stats, they doesn't need to be stats normally tracked by the game. Custom stats should be prefixed with your mod's unique ID to avoid conflicts:
Game1.stats.Set("Your.ModId_CustomStat", 5);
And finally, setting a stat to 0 now removes it from the stats dictionary (since that's the default for missing stats).
New C# utility methods
Stardew Valley 1.6 adds several new methods to simplify common logic.
Argument handling
The new ArgUtility class handles splitting, reading, and validating string[] argument lists. The main methods are:
Splitting arrays:
ArgUtility method effect
SplitBySpace Split space-separated arguments in a string. This automatically ignores extra spaces, so " x  y " and "x y" are equivalent. For example:
string[] fields = ArgUtility.SplitBySpace("a b c");
string secondField = fields[1]; // "b"
SplitBySpaceAndGet Get the value at an index in a space-delimited string (if found), else return the default value. For example:
string thirdField = ArgUtility.SplitBySpaceAndGet("a b c", 2); // "c"
string invalidFieldA = ArgUtility.SplitBySpaceAndGet("a b c", 5); // null
string invalidFieldB = ArgUtility.SplitBySpaceAndGet("a b c", 5, defaultValue: "boop"); // "boop"
This is more efficient than SplitBySpace when you only need a single value, but it's slower if you need multiple values.
SplitBySpaceQuoteAware Split space-separated arguments in a string, with support for using quotes to protect spaces within an argument. See SplitQuoteAware below for info on quote handling.
For example:
string buildingName = ArgUtility.SplitBySpaceQuoteAware("BUILDINGS_CONSTRUCTED Here \"Junimo Hut\"")[1]; // Junimo Hut
SplitQuoteAware Split delimited arguments in a string, with support for using quotes to protect delimiters within an argument.
A quote in the text causes any delimiter to be ignored until the next quote, unless it's escaped like \". Unescaped quotes are removed from the string. (Remember that backslashes need to be escaped in C# or JSON strings, like "\\" for a single backslash.)
For example:
ArgUtility.SplitQuoteAware("A,B,C", ',');        // [ "A", "B", "C" ]
ArgUtility.SplitQuoteAware("A,\"B,C\",D", ','); // [ "A", "B,C", "D" ]
ArgUtility.SplitQuoteAware("A,\\\"B,C", ',');    // [ "A", "\"B", "C" ]
You can also set the optional arguments for more advanced cases. For example, game state queries use this to split twice:
string gameStateQuery = "BUILDINGS_CONSTRUCTED Here \"Junimo Hut\", SEASON Spring";

string[] queries = ArgUtility.SplitQuoteAware(gameStateQuery, ',', StringSplitOptions.RemoveEmptyEntries, keepQuotesAndEscapes: true); // [ "BUILDINGS_CONSTRUCTED Here \"Junimo Hut\"", "SEASON Spring" ]
string buildingName = ArgUtility.SplitBySpaceQuoteAware(queries[0]); // Junimo Hut
EscapeQuotes Escape quotes in a string so they're ignored by methods like SplitQuoteAware.
This isn't idempotent (e.g. calling it twice will result in double-escaped quotes).
UnsplitQuoteAware Combine an array of arguments into a single string with a custom delimiter, using quotes where needed to escape delimiters within an argument. Calling SplitQuoteAware on the resulting string with the same delimiter will produce the original values.
For example:
string args = ArgUtility.UnsplitQuoteAware(new[] { "A", "B C", "D" }, ' '); // A "B C" D
This isn't idempotent (e.g. calling it twice will result in double-escaped quotes).
Reading arrays:
ArgUtility method effect
HasIndex Get whether an index is within the bounds of the array. For example:
string[] fields = ArgUtility.SplitByString("10 5");
bool inRange = ArgUtility.HasIndex(fields, 1); // true (index 1 has the value '5')
Get
GetBool
GetDirection
GetEnum
GetFloat
GetInt Get the value at a position in an array, parsed as the relevant type (e.g. a string, boolean, direction, enum, etc). If the index isn't in the array or the value can't be parsed as the expected type, returns a default value.
For example, code like this:
int value = fields.Length > 4 && int.TryParse(fields[4], out int parsed)
    ? parsed
    : -1;
Can now be rewritten like this:
int value = ArgUtility.GetInt(fields, 4, -1);
TryGet
TryGetBool
TryGetDirection
TryGetEnum
TryGetFloat
TryGetInt
TryGetPoint
TryGetRectangle
TryGetVector2 Try to get a parsed value from an array by its index. If it's not found or can't be converted to the expected value, it sets the out string error argument so you can log an error if needed.
For example, this parses a numeric value from a space-delimited string:
string[] fields = ArgUtility.SplitByString("10 35");
if (ArgUtility.TryGetInt(fields, 1, out int value, out string error))
    this.Helper.Monitor.Log($"Parsed value: {value}"); // "Parsed value: 35"
else
    this.Helper.Monitor.Log($"Failed parsing value: {error}", LogLevel.Warn);
TryGetOptional
TryGetOptionalBool
TryGetOptionalDirection
TryGetOptionalEnum
TryGetOptionalFloat
TryGetOptionalInt
TryGetOptionalRemainder Equivalent to TryGet*, except that it'll return a default value if the argument is missing. For example:
string[] fields = ArgUtility.SplitByString("10");
if (ArgUtility.TryGetOptionalInt(fields, 1, out int value, out error, defaultValue: 99))
    this.Helper.Monitor.Log($"Parsed value: {value}"); // "Parsed value: 99"
else
    this.Helper.Monitor.Log($"Failed parsing value: {error}", LogLevel.Warn);
GetRemainder
TryGetRemainder
TryGetOptionalRemainder Similar to the previous methods, but gets arguments starting from an index as a concatenated string. For example:
string[] fields = ArgUtility.SplitByString("A B C D E F");
if (ArgUtility.TryGetRemainder(fields, 2, out string remainder, out string error))
    this.Helper.Monitor.Log($"Remainder: {remainder}"); // "Remainder: C D E F"
else
    this.Helper.Monitor.Log($"Failed getting remainder: {error}", LogLevel.Warn);
GetSubsetOf Get a slice of the input array. For example:
string[] subset1 = ArgUtility.GetSubsetOf(new[] { "A", "B", "C", "D" }, startAt: 1); // B, C, D
string[] subset2 = ArgUtility.GetSubsetOf(new[] { "A", "B", "C", "D" }, startAt: 1, length: 2); // B, C
This is fault-tolerant as long as startAt isn't negative. For example:
string[] subset2 = ArgUtility.GetSubsetOf(new[] { "A", "B", "C", "D" }, startAt: 100); // <empty array>
string[] subset1 = ArgUtility.GetSubsetOf(new[] { "A", "B", "C", "D" }, startAt: 1, length: 100); // B, C, D
Content assets
method effect
LocalizedContentManager.DoesAssetExist Get whether an asset exists in the game's Content folder or is provided through SMAPI's content API. For example:
bool exists = Game1.content.DoesAssetExist<Map>("Maps/Town");
LocalizedContentManager.IsValidTranslationKey Get whether a string is a translation key in the form <asset name>:<key>, and the asset and key both exist. For example:
bool exists = Game1.content.IsValidTranslationKey("Strings\\NPCNames:Abigail");
Filtering
The game now has an optimized RemoveWhere method for O(n) filtering on NetCollection, NetDictionary, NetList, and (via extension) IDictionary. This also deprecates Filter methods where they existed.
For example:
int dirtTilesRemoved = Game1.currentLocation.terrainFeatures.RemoveWhere(pair => pair.Value is HoeDirt);
Game paths
The game folder paths were previously hardcoded throughout the code. These are now centralized with a few methods:
method effect
Program.GetLocalAppDataFolder
Program.GetAppDataFolder Get the absolute path to the game's app data folder (which contains the Saves folder) or local app data folder (which contains ErrorLogs and Screenshots). These methods are equivalent on Windows, but different on Linux/macOS.
Program.GetSavesFolder Get the absolute path to the game's Saves folder.
Game1.GetScreenshotFolder Get the absolute path to the game's Screenshots folder.
options.GetFilePathForDefaultOptions Get the absolute path to the game's default_options file.
Hash sets
Since the game now uses hash sets, it has a few extensions for working with them:
method effect
AddRange Add all the values from a list or enumerable to the set.
RemoveWhere Remove all values matching a condition.
Toggle Add or remove a value in the set based on a boolean. For example:
public bool hasClubCard
{
    get { return mailReceived.Contains("HasClubCard"); }
    set { mailReceived.Toggle("HasClubCard", value); }
}
Iteration
The new Utility.ForEach* methods let you check every thing of a type in the game world quickly and efficiently (with minimal allocations, boxing, etc). These are significantly faster than equivalent code using LINQ or yield methods.
method effect
Utility.ForEachBuilding Perform an action for each building in the game world.
Utility.ForEachCharacter
Utility.ForEachVillager Perform an action for each NPC in the game world. ForEachCharacter matches all NPC types (villagers, horses, pets, monsters, player children, etc), while ForEachVillager only matches villager NPCs like Abigail.
Utility.ForEachCrop Perform an action for each crop in the game world planted in the ground or in a garden pot.
Utility.ForEachItem Perform an action for each item in the game world, including items within items (e.g. in a chest or on a table), hats placed on children, items in player inventories, etc.
Utility.ForEachItemIn Perform an action for each item within a given location, including items within items (e.g. in a chest or on a table).
Utility.ForEachLocation Perform an action for each location in the game world, optionally including building interiors and generated mine or volcano levels.
For example, this code counts how many parsnips are planted everywhere in the world:
int parsnips = 0;
Utility.ForEachCrop(crop =>
{
    if (crop.IndexOfHarvest == "24")
        parsnips++;
    return true; // whether to keep iterating after this crop
});
Or you could replace all instances of an obsolete item with a new one:
Utility.ForEachItem((item, remove, replaceWith) =>
{
    if (item.QualifiedItemId == "(O)OldId")
    {
        Item newItem = ItemRegistry.Create("(O)NewId", item.Stack, item.Quality);
        replaceWith(newItem);
    }

    return true;
});
C# mods which add custom item types can override Item.ForEachItem to add support for nested items.
Randomization
method effect
Utility.CreateDaySaveRandom Creates a Random instance using the most common seed (based on the save ID and total days played).
Utility.CreateRandom
Utility.CreateRandomSeed Creates a Random (or seed for a Random) by combining the given seed values, which can be any numeric type.
Utility.TryCreateIntervalRandom Get an RNG which produces identical results for all RNGs created with the same sync key during the given interval (one of tick, day, season, or year), including between players in multiplayer mode.
For example, this will return the same number each time it's called until the in-game day changes:
public int GetDailyRandomNumber()
{
    Utility.TryCreateIntervalRandom("day", "example sync key", out Random random, out _);
    return random.Next();
}
Utility.TryGetRandom Get a random entry from a dictionary.
random.Choose Choose a random option from the values provided:
string npcName = Game1.random.Choose("Abigail", "Penny", "Sam");
random.ChooseFrom Choose a random option from a list or array:
string[] names = new[] { "Abigail", "Penny", "Sam" };
string npcName = Game1.random.ChooseFrom(names);
random.NextBool Randomly choose true or false. For example:
bool flipSprite = Game1.random.NextBool();
You can optionally set the probability of true:
bool flipSprite = Game1.random.NextBool(0.8);
Other
Here are some of the other new methods:
method effect
Game1.getOfflineFarmhands() Get all farmhands who aren't connected to the game.
Game1.PerformActionWhenPlayerFree Calls the provided callback next time the player is free (e.g. no menu or event is up, not using a tool, etc). If the player is already free, it's run immediately.
For example, if you receive your first geode from a fishing chest, this is used to show the geode-received animation & animation when it closes.
Game1.createRadialDebris_MoreNatural Scatter item debris around a position with a more randomized distribution than createRadialDebris.
Object.GetCategoryColor
Object.GetCategoryDisplayName Get the color and display name for the given category number when it's shown in a tooltip.
Utility.distanceFromScreen Get the pixel distance between a position in the world and the player's screen viewport, where 0 is within the viewport.
Utility.DrawErrorTexture Draw the game's missing-texture image (🚫) to the screen, stretched to fit a given pixel area.
Utility.DrawSquare Draw a square to the screen with a background color and/or borders.
Utility.GetEnumOrDefault Get an enum value if it's valid, else get a default value. This is mainly used to validate input from data files.
For example:
NpcGender gender = (NPCGender)999999;
gender = Utility.GetEnumOrDefault(gender, Gender.Male); // returns Gender.Male since there's no enum constant with value 999999
Utility.getRandomNpcFromHomeRegion Get a random social NPC based on their HomeRegion value in Data/Characters. For example, this gets a random NPC for the Town home region:
NPC npc = Utility.getRandomNpcFromHomeRegion(NPC.region_town);
Utility.isFestivalDay This method existed before 1.6, but you can now omit arguments to check today instead of a specific date:
bool festivalToday = Utility.isFestivalToday();
Or check for a festival in specific location context:
bool desertFestivalToday = Utility.isFestivalToday(LocationContexts.DesertId);
Utility.IsPassiveFestivalDay This method existed before 1.6, but now can now omit arguments to check today instead of a specific date:
bool passiveFestivalToday = Utility.IsPassiveFestivalDay();
Or check for a specific passive festival:
bool nightMarketToday = Utility.IsPassiveFestivalDay("NightMarket");
Utility.TryGetPassiveFestivalData
Utility.TryGetPassiveFestivalDataForDay Get the passive festival data for the given ID or date.
Utility.TryParseDirection Parse a string into a direction value (like Game1.down), if it's valid. This supports case-insensitive direction names (one of down, left, right, or up) or numeric values.
Utility.TryParseEnum Parse a string into an enum value if possible, case-insensitively. Unlike Enum.TryParse, an invalid numeric value won't be cast:
Enum.TryParse("999999", out DayOfWeek day);        // true, even though there's no matching DayOfWeek value
Utility.TryParseEnum("999999", out DayOfWeek day); // false
Utility.fuzzyCompare Get whether a term is a fuzzy match for a search query. Returns the numeric match priority (where lower values are a better match), or null if the term doesn't match the query.
rectangle.GetPoints
rectangle.GetVectors Get all the integer coordinates within a given Rectangle. For example:
var tileArea = new Rectangle(0, 0, 2, 2);
Point[] tiles = tileArea.GetPoints(); // (0, 0), (1, 0), (0, 1), (1, 1)
Utility.GetDeterministicHashCode (Specialized) Get a hash code for a string key or numeric values. Unlike string.GetHashCode or HashCode.Combine, this produces a consistent hash for the same inputs between sessions and connected players.
Utility.WrapIndex Constrain an index to a range by wrapping out-of-bounds values to the other side (e.g. last index + 1 is the first index, and first index - 1 is the last one).
For example:
string[] values = new[] { "0", "1", "2" };
int index = Utility.WrapIndex(-1, values.Length); // 2
Static delegate builder
For C# mods, StaticDelegateBuilder is a specialized class which converts a method name into an optimized delegate which can be called by code. This is used by vanilla code to optimize methods referenced in assets like Data/Machines.
For example, given a static method like this:
public static bool OutputDeconstructor(Object machine, Item inputItem, bool probe, MachineItemOutput outputData, out int? overrideMinutesUntilReady) { ... }
And a delegate which matches it:
public delegate bool MachineOutputDelegate(Object machine, Item inputItem, bool probe, MachineItemOutput outputData, out int? overrideMinutesUntilReady);
You can create an optimized delegate and call it like this:
if (StaticDelegateBuilder.TryCreateDelegate("StardewValley.Object.OutputDeconstructor", out MachineOutputDelegate method, out string error))
    return method(this, inputItem, probe, outputData, out minutesUntilMorning);
else
    Game1.log.Warn($"Machine {ItemId} has invalid output method: {error}");
The TryCreateDelegate method will cache created delegates, so calling it again will just return the same delegate instance.
Game logging changes
The game now writes debug output through an internal Game1.log wrapper, instead of using Console.WriteLine directly. For example:
// old code
Console.WriteLine("Error playing sound: " + ex);

// new code
Game1.log.Error("Error playing sound.", ex);
This has a few benefits:
For vanilla players, the game no longer uses time & resources writing to a console that's not visible anyway.
For modded players, SMAPI can now...
distinguish between the game's debug/warn/error messages (so many warnings/errors that would previously appear as hidden TRACE messages will now be shown with the correct level);
apply its formatting rules to exceptions logged by the game too;
redirect game output much more efficiently without console interception.
Other changes
Audio
Added Game1.sounds, which unifies the high-level sound effect logic (e.g. distance fading and multiplayer sync).
Added silence audio cue for music. This is different from none in that it suppresses both town music and ambient sounds.
Added Game1.soundBank.Exists(cueName) method to check if an audio cue exists.
Added Game1.playSound overloads to get the audio cue being played.
Added character.playNearbySoundAll and playNearbySoundAllLocal methods to play a sound for players near the player/character.
Added position argument to DelayedAction.playSoundAfterDelay.
Removed NetAudioCueManager and Game1.locationCues (unused).
Unified the methods for playing normal/pitched/positional sounds (which also adds support for pitched non-synced & pitched positional sounds):
old methods new method
Game1.playSound
Game1.playSoundAt
Game1.playSoundPitched Game1.playSound
GameLocation.playSound
GameLocation.playSoundAt
GameLocation.playSoundPitched GameLocation.playSound
GameLocation.localSound
GameLocation.localSoundAt GameLocation.localSound
NetAudio.Play
NetAudio.PlayAt
NetAudio.PlayPitched NetAudio.Play
NetAudio.PlayLocal
NetAudio.PlayLocalAt NetAudio.PlayLocal
Debug commands
See the updated docs at Modding:Console commands. The section below focuses on what's new in this version.
All debug commands are now quote-aware, so you can pass spaces in arguments like debug build "Junimo Hut".
Added new debug commands:
command description
action <action> Run a trigger action string, like action AddMoney 500 to add 500g to the current player.
artifactSpots Spawn an artifact spot in each empty tile around the player.
endEvent / ee Immediately end the current event or festival, applying the event's skip logic (if any). The event is marked seen, but you can rewatch it using the eventById command if needed.
This replaces the pre-1.6 commands (ee, endEvent/leaveEvent, and eventOver) which worked in different ways and had side-effects like restarting the event or clearing the player's mail.
exportShops Export a summary of what's in every shop in the game, taking into account their current conditions. This is saved to a file on disk, and the file path shown in the console.
filterLoadMenu / flm Syntax: filterLoadMenu <search text>
Filter the current list of saves to those whose player name or farm name contains the given text.
forcebuild Equivalent to build, but disables all safety checks so you can build in a location that wouldn't normally allow buildings, build on top of farm animals or placed objects, etc.
gamequery / gq Syntax: gq <query>
Check whether the given game state query matches in the current context. For example:
gq !SEASON Spring, WEATHER Here Sun
> Result: true.
itemquery / iq Syntax: iq <query>
Open a shop menu with all the items matching an item query (all items free). For example:
debug iq ALL_ITEMS shows all items;
debug iq ALL_ITEMS (W) shows all weapons;
debug iq (O)128 shows a pufferfish (object 128);
debug iq FLAVORED_ITEM Wine (O)128 shows Pufferfish Wine.
logFile Begin writing debug messages to a log file at %appdata%/StardewValley/ErrorLogs/game-latest.txt to simplify troubleshooting. You can also enter /logtext into the in-game chatbox to enable it.
This does nothing if SMAPI is installed, since the debug messages are already saved to SMAPI's log.
logSounds Log info about each sound effect played to the SMAPI console window.
movieSchedule [year] Lists the movies that will play in a given [year] (default this year), with the dates they'll play.
qualifiedid Print the held item's display name and qualified item ID.
search Syntax: search [term]
List all debug commands that match the given search term (or all debug commands if the search term is omitted). For example:
debug search backpack
> Found 2 debug commands matching search term 'backpack':
    - Backpack
    - FillBackpack (fbp, fill, fillbp)
setFarmEvent / sfe Syntax: setFarmEvent <event id>
Queue an overnight farm event if one doesn't plan naturally instead. The <event id> can be one of...
dogs;
earthquake;
fairy;
meteorite;
owl;
ufo;
witch.
Note that even if the farm event runs, it may exit without doing anything (e.g. rare events like ufo have extra condition checks when the start).
shop Syntax: shop <shop ID> [owner name]
Open a shop defined in Data/Shops, regardless of whether one of the owners is nearby. Specifying [owner name] will use that NPC, otherwise the command will find the closest valid NPC if possible (else open with no NPC).
skinBuilding / bsm If the player is standing right under a building, open a menu to change the building appearance.
testwedding Immediately play the wedding event. This requires the player to be married first - to test specific NPCs, debug marry the NPC followed by this command.
thishouseupgrade / thishouse / thu Equivalent to houseupgrade, but can be used to upgrade another player's house by running it from inside or just south of its exterior.
toggleCheats Enable or disable entering debug commands into the in-game chat (prefixed with /).
tokens Syntax: tokens <tokenized string>
Parses a tokenizable string and prints its output. For example:
tokens [LocalizedText Strings\StringsFromCSFiles:MapPage.cs.11064 [EscapedText [FarmName]]]
> Result: "Lon Lon Farm"
worldMapLines Toggles the world map's debug view.
Improved existing debug commands:
command changes
build Removed custom space handling; quote arguments with spaces instead of replacing them with 9 (e.g. Junimo9Hut → "Junimo Hut").
clearFurniture Now works outside the farmhouse too.
dialogue Removed custom space handling; quote NPC names containing spaces instead, with all text after the first argument treated as part of the dialogue (e.g. debug dialogue "Some NPC" Some dialogue text$h).
ebi Fixed event not played correctly if called from the same location as the event.
fish Fixed error if you're not holding a fishing rod. It now opens the fishing minigame with no tackle instead.
frameOffset
Simplified usage. You can now pass negative offsets directly (like debug frameOffset -5 -10) instead of using the s number prefix.
Fixed command only taking the last digit in each number.
getStat
setStat Added argument validation.
grass Now applies to the current location, instead of the farm.
growAnimals
growAnimalsFarm Merged into one growAnimals command that supports any location and doesn't reset the age of animals which are already adults.
growCrops Fixed error growing mixed seeds or giant crops.
itemNamed Removed custom space handling; quote arguments with spaces instead of removing them (e.g. EelRoe → "Eel Roe").
junimoGoodbye
junimoStar Added validation to check that you're inside the community center.
killAll
killAllHorses
killNpc These now remove matching NPCs inside constructed buildings too.
killMonsterStat Removed custom space handling; quote arguments with spaces instead of replacing them with 0 (e.g. Dust0Spirit → "Dust Spirit").
mailForTomorrow Fixed zeros in the mail ID getting replaced with underscores.
monster Added validation for the monster name.
moveBuilding Now applies to the current location, instead of the farm.
movie Rewritten; it's now simpler, applies the normal game logic, defaults to today's movie, and avoids depending on NPC indexes in Data/NPCDispositions since those can change with custom NPCs.
New usage:
debug movie [movie ID] [invite NPC name]
debug movie current [invite NPC name]
The movie ID defaults to today's movie, and the NPC name can be omitted to watch the movie without an invitee. Specifying current as the movie uses the default value.
panMode The command no longer overrides debug command handling while it's active. Instead you can now turn it back off by running debug panMode again, clear with debug panMode clear, or set a time with debug panMode {time}.
paintBuilding
Now applies to the current location, instead of the farm.
Added validation for the target building.
playSound Added an optional pitch argument, like debug playSound barrelBreak 1200. The pitch is a value from 1 (low pitch) to 2400 (high pitch) inclusively.
question You can now forget a selected answer (instead of adding it) by setting the second argument to false, like question <id> false.
runTestEvent Fixed support for Unix line endings.
seenEvent You can now forget an event (instead of adding it) by setting the second argument to false, like seenEvent <id> false.
seenMail You can now remove a mail received (instead of adding it) by setting the second argument to false, like seenMail <id> false.
skinBuilding
Now applies to the current location, instead of the farm.
Added validation for the target building.
skullGear
Fixed command setting 32 slots instead of 36.
Fixed command not adding empty inventory slots as expected by some game code.
setupFishPondFarm Fixed error if the farm already has non-fish-pond buildings constructed.
speech Removed custom space handling; quote NPC names containing spaces instead, with all text after the first argument treated as part of the dialogue (e.g. debug speech "Some NPC" Some dialogue text$h).
spreadDirt Now applies to the current location, instead of the farm.
spreadSeeds Now applies to the current location, instead of the farm.
thisHouseUpgrade Now applies to the current location, instead of the farm.
warpToPlayer Removed custom space handling; quote arguments with spaces instead of removing them (e.g. JohnSmith → "John Smith").
whereIs
Now lists all matching NPCs instead of the first one.
Now searches the current event or festival, if any.
Removed some debug commands:
command notes
ax
bigItem/b/bi/big
boots
clothes
hoe
milkPail/mp
pan
pickaxe/pick/pickax
ring/addRing
shears/scissors
slingshot
tool
wateringCan/can
wand
weapon These are replaced by more general commands like item (O)128 (spawn item by ID), fuzzyItemNamed pufferfish (spawn by item name), or itemQuery FLAVORED_ITEM Wine (O)128 (spawn by item query).
addQuartz
blueBook
blueprint
end These were part of unused features removed in 1.6.
changeStat Removed; use setStat instead.
ee
endEvent/leaveEvent
eventOver Replaced by the new endEvent command.
everythingshop Removed. You can get all items like debug iq ALL_ITEMS, or all items of a given type like debug iq ALL_ITEMS (O).
oldMineGame Removed along with the pre-1.4 Junimo Kart code.
pathSpouseToMe/pstm Removed along with the unimplemented farm activities code.
Added alternative names for some debug commands (new names in parentheses): bpm + bsm (paintBuilding + skinBuilding), craftingRecipe (addCraftingRecipe), db (speakTo), dialogue (addDialogue), pdb (printGemBirds), r (resetForPlayerEntry), removeLargeTf (removeLargeTerrainFeature), sb (showTextAboveHead), sl + sr (shiftToolbarLeft + shiftToolbarRight), sn (secretNote), and tls (toggleLightingScale).
Reworked how debug commands log output. This fixes an issue where they don't always log to the right place (e.g. a command run through the chatbox might log to the console or vice-versa), and lets mods pass a custom logger to capture or redirect output.
Location logic
The desert no longer assumes the player arrived by bus unless their previous location was the bus stop.
The ticket price for the bus and Willy's boat can now be edited by C# mods via BusStop.TicketPrice and BoatTunnel.TicketPrice respectively.
Menus & UI
Rewrote calendar menu (Billboard) to simplify custom events & event types. C# mods can now edit billboard.calendarDayData or patch billboard.GetEventsForDay to add new events.
Added Game1.textShadowDarkerColor field for the colors previously hardcoded in Utility.drawTextWithShadow.
Added MoneyDial.ShouldShakeMainMoneyBox field to simplify custom dials.
Partly de-hardcoded ShopMenu filter tabs. You can now change filter tabs by setting the shopMenu.tabButtons field with arbitrary Func<ISalable, bool> Filter values, or by using a predefined set of tabs like shopMenu.UseDresserTabs().
The SpriteText methods now accept arbitrary Color tints instead of a few predefined color IDs.
The DiscreteColorPicker.getColorFromSelection methods are now static for reuse.
Fixed DiscreteColorPicker constructor ignoring the initial color argument, and added a constructor which takes a Color value.
Fixed an edge case where a custom language's fonts wouldn't be loaded when switching language.
Net fields
Removed implicit conversion operators for most types due to their sometimes counter-intuitive behavior. The only ones left are NetBool, NetInt, and NetString; those are now marked obsolete and will raise build warnings on use.
NetLocationRef now has a public LocationName and IsStructure, and its Update method allows forcing an update.
Quests
These docs should be merged into Modding:Quest data. When copying content, make sure you attribute the original authors.
Quests now have string IDs, to simplify custom quest frameworks.
Added validation for quest data parsing.
In Data/SpecialOrders, the Duration and Repeatable fields are now strongly-typed and case-insensitive.
For C# mods, fixed DescriptionElement not allowing more than four translation token substitutions.
Dates & seasons
Added a Season enum for strongly-typed, case-insensitive season checks (like Game1.season == Season.Spring instead of Game1.currentSeason == "spring").
Added Game1.season, Game1.GetSeasonForLocation, Game1.WorldDate.Season, and location.GetSeason() to get the season enum.
Added Utility.getSeasonKey to get the key form from a season enum.
Improved WorldDate:
added Now() to get a new instance matching the current date;
added WorldDate.Equals and GetHashCode implementations;
added code docs;
TotalDays is no longer written to the save file.
Renamed some members for clarity (Game1.GetSeasonForLocation → GetSeasonKeyForLocation, location.GetSeasonForLocation → GetSeasonKey, WorldDate.Season → SeasonKey).
Fixed location.GetSeasonKey() not applying the greenhouse logic.
Time
For C# mods, the Game1.realMilliSecondsPerGame and Game1.realMilliSecondsPerGameTenMinutes fields are no longer marked const, and the GameLocation.getExtraMillisecondsPerInGameMinuteForThisLocation() method has been replaced with a settable ExtraMillisecondsPerInGameMinute property. That lets you change the time rate used by the vanilla game code, but you should be careful doing this since it may cause unintended effects.
Other
Error stack traces on Linux/macOS now have line numbers.
All space-delimited fields now ignore extra spaces instead of crashing. This affects map/tile properties, data assets, event commands, game state queries, etc.
All players and NPCs now have Tile & TilePoint properties (their cached tile position) and a StandingPixel property (the cached pixel coordinate at the center of their bounding box). These replace various deleted methods.
All terrain features now have Tile and Location properties, and their methods no longer have location/tile parameters in most cases.
All net fields now have Name and Owner fields, which are used to show informative error messages when there's a sync issue and validate common mistakes (e.g. a net field not added to the NetFields collection).
The game now tracks the locations a player has visited. Mods can check the list in C# (via Game1.player.locationsVisited) or game state queries (via PLAYER_VISITED_LOCATION). For pre-existing saves, the list is retroactively populated based on accessible locations, events seen, mail flags set, etc.
Added menu queuing (via Game1.nextClickableMenu in C#). For example, this applies if you try to take an item from a mail letter when your inventory is full.
Added C# code docs in many places.
Added Id fields to simplify content pack edits in fish pond, movie concession, random bundle, and tailoring recipe data.
Added Game1.Multiplayer to get the game's low-level handler. (Most code should still use SMAPI's multiplayer API though.)
Added Game1.versionBuildNumber with the build number (like 26039).
Added field-changed events to NetPosition.
Added LocalizedContentManager.CurrentLanguageString, which caches the language code like pt-BR).
The game now uses [XmlInclude] on its types more consistently. That means the default save serializer can handle more types (e.g. all monsters), and it's easier to create custom serializers.
Refactored many parts of the code to make it more moddable for C# mods. This includes marking all classes public, changing private members to protected or public, marking members virtual, rewriting or splitting code so it's easier to extend, etc.
The startup_preferences file is now formatted to simplify troubleshooting.
Fixed many cases where the game used Game1.player instead of the provided player.
Breaking changes for C# mods
This section only describes how this update may break existing mods. See the what's new sections above for more info, including new functionality mods can use.
See also Breaking changes for content packs, which affect C# mods too.
.NET 6
See also: .NET 6 under what's new.
Stardew Valley 1.6 updates from .NET 5 to .NET 6. SMAPI can still load .NET 5 mods fine, but you'll get a build error when compiling them. To update a C# mod:
Make sure you have Visual Studio Community 2022 or later. (Compiling .NET 6 with earlier versions of Visual Studio isn't officially supported.)
In Visual Studio, click Help > Check For Updates and install the latest version.
Fully exit Visual Studio.
Open each mod's .csproj file in a text editor, then find this line:
<TargetFramework>net5.0</TargetFramework>
And change it to this:
<TargetFramework>net6.0</TargetFramework>
Delete your solution's hidden .vs folder, and every project's bin and obj folders.
Reopen the solution in Visual Studio, click Build > Rebuild Solution, and make sure it still loads into the game fine.
Item ID changes
See also: custom items in what's new.
The main Item properties have changed. To migrate existing code:
Don't use ParentSheetIndex to compare items. For example, item.ParentSheetIndex == 0 will match both weeds and any custom item whose sprite is the first one in its custom spritesheet. You should compare items using their new ItemId and QualifiedItemId properties instead. For example, here's how to migrate various common forms:
old code new code
item.ParentSheetIndex == 848 item.QualifiedItemId == "(O)848"
IsNormalObjectAtParentSheetIndex(item, 74) item.QualifiedItemId == "(O)74"
!item.bigCraftable && item.ParentSheetIndex == 128 item.QualifiedItemId == "(O)128"
item is Boots && item.ParentSheetIndex == 505 item.QualifiedItemId == "(B)505"
Don't assume item sprites are in the vanilla spritesheets. For example, instead of rendering Game1.objectSpriteSheet for an object, call ItemRegistry.GetMetadata(item.QualifiedItemId).GetTexture() to get its texture.
Creating items works just like before, except that you now specify the item's ItemId (not QualifiedItemId) instead of its ParentSheetIndex. This is the same value for vanilla items. For example:
new Object("634", 1);                      // vanilla item
new Object("Example.ModId_Watermelon", 1); // custom item
You can also use the new ItemRegistry API to construct items from their QualifiedItemId:
Item item = ItemRegistry.Create("(B)505"); // Rubber Boots
Other ID changes
Many other things in the game now have unique string IDs too (including buffs, events, and fruit trees). To migrate existing code:
When referencing numeric IDs, you usually just need to convert them into a string (like Game1.player.hasBuff("1590166") or Game1.player.eventsSeen.Contains("1590166")).
When creating buffs, see buff overhaul for how to create buffs now.
For pre-existing content pack data, see migration steps in the unique string IDs section.
Building and animal changes
See also: build anywhere in what's new.
Since all locations now allow buildings and animals, mod code which handles BuildableGameLocation and IAnimalLocation won't detect all buildable locations. You can replace them with location.IsBuildableLocation() (or just access location.buildings directly) and location.animals.Any() instead. Mods should no longer have any reference at all to BuildableGameLocation and IAnimalLocation.
Since buildings can be built anywhere, you can no longer assume a building is on the farm. You can check the new building.buildingLocation field instead.
You should review direct references to the farm (like Game1.getFarm() or Game1.getLocationFromName("Farm")) to see if it needs to be rewritten to allow other locations.
Utility.numSilos() should no longer be used to calculate available hay, since it doesn't account for custom buildings with hay storage. Use Game1.getFarm().GetHayCapacity() instead.
The Cat and Dog classes are now unused; all pets are now Pet directly.
Player changes
See also: buff overhaul in what's new.
Several Game1.player / Farmer fields changed as part of the buff overhaul:
old field how to migrate
appliedBuffs
appliedSpecialBuffs Use Game1.player.hasBuff(id) instead.
attack
immunity Use Attack and Immunity instead.
addedCombatLevel
addedFarmingLevel
addedFishingLevel
addedForagingLevel
addedLuckLevel
addedMiningLevel
attackIncreaseModifier
critChanceModifier
critPowerModifier
knockbackModifier
weaponPrecisionModifier
weaponSpeedModifier Use equivalent properties under Game1.player.buffs instead (e.g. Game1.player.buffs.CombatLevel).
resilience Use buffs.Defense instead.
addedSpeed
CombatLevel
CraftingTime
FarmingLevel
FishingLevel
ForagingLevel
LuckLevel
MagneticRadius
MaxStamina
MiningLevel
Stamina These are now readonly and can't be set directly. You can change them by adding a buff (which can be invisible), equipment bonus, etc instead.
Buffs are now recalculated automatically, and you can reset a buff by just reapplying it. See buff overhaul for more info.
Buff logic has been centralized into Game1.player.buffs. This replaces a number of former fields/methods like Game1.buffsDisplay.
Collision changes
The game's tile collision logic has been overhauled and merged into a simpler set of methods on GameLocation instances:
method effect
CanSpawnCharacterHere Get whether NPCs can be placed on the given tile (e.g. it's within the map bounds and tile is walkable), there's no placed object there, and the NoFurniture tile property isn't set.
CanItemBePlacedHere Get whether items can be placed on the given tile in non-floating form (e.g. it's within the map bounds and not blocked by a non-walkable item), and the NoFurniture tile property isn't set.
isBuildable Get whether buildings can be placed on the given tile.
IsTilePassable Get whether the tile can be walked on (ignoring collisions with in-game objects, NPCs, etc).
IsTileOccupiedBy Get whether the tile contains a player, object, NPC/monster/pet/etc, terrain feature, building, etc. You can choose which entities to check, and which ones to ignore if they don't block movement.
IsTileBlockedBy Equivalent to calling both IsTilePassable and IsTileOccupiedBy.
IsLocationSpecificOccupantOnTile
IsLocationSpecificPlacementRestriction Generally shouldn't be used directly. Checks for location-specific collisions (e.g. ladders in the mines or parrot platforms on Ginger Island).
Other breaking API changes
(This section is meant as a quick reference if you have build errors; there's no need to read through it otherwise.)
Removed unused code
1.6 removes a lot of unused code. That includes these classes:
namespace class name
StardewValley
BuildingUpgrade
DisposableList
FurniturePlacer
ListPool
OneTimeRandom
StardewValley.Characters
BotchedNetBool
BotchedNetField
BotchedNetInt
BotchedNetLong
StardewValley.Menus
FarmInfoPage
MiniatureTerrainFeature
StardewValley.Monsters
LavaCrab
StardewValley.Objects
ObjectFactory (replaced by ItemRegistry)
StardewValley.TerrainFeatures
Quartz
StardewValley.Tools
Blueprints
ToolFactory (replaced by ItemRegistry)
And these class members:
type members
Axe
StumpStrength
Bush
alpha
lastPlayerToHit
Chest
chestType
coins
CosmeticPlant
scale
CraftingRecipe
itemType
Critter
InitShared()
Crop
daysOfUnclutteredGrowth
Dialogue
dialogueToBeKilled
Farm
GetSpouseOutdoorAreaSpritesheetIndex()
FarmAnimal
homeLocation
Farmer
barnUpgradeLevel and BarnUpgradeLevel
blueprints
coalPieces and CoalPieces
coopUpgradeLevel and CoopUpgradeLevel
copperPieces and CopperPieces
eyeColor
feed and Feed
furnitureOwned
goldPieces and GoldPieces
hasBusTicket
hasGreenhouse
iridiumPieces and IridiumPieces
ironPieces and IronPieces
newSkillPointsToSpend
overallsColor
ownsFurniture
quartzPieces and QuartzPieces
shirtColor
skinColor
stonePieces and StonePieces
theaterBuildDate
woodPieces and WoodPieces
Game1
boardingBus
chanceToRainTomorrow
checkForNewLevelPerks
cloud
coopDwellerBorn
cropsOfTheWeek
currentBarnTexture
currentBillboard
currentCoopTexture
currentFloor
currentHouseTexture
currentWallpaper
dealerCalicoJackTotal
FarmerFloor
farmerWallpaper
fertilizer
floorPrice
greenhouseTexture
inMine
jukeboxPlaying
keyHelpString
listeningForKeyControlDefinitions
littleEffect
logoScreenTexture
mailboxTexture
menuChoice
menuUp
nameSelectUp
nameSelectType
numberOfSelectedItems
particleRaining
pickingTool
pickToolDelay
pickToolInterval
priceOfSelectedItem
progressBar
removeSquareDebrisFromTile(…)
selectedItemsType
shiny
shippingTax
showKeyHelp
slotResult
startedJukeboxMusic
tinyFontBorder
toolHeld
toolIconBox
tvStation
tvStationTexture
wallpaperPrice
GameLocation
boardBus(…)
checkForMapChanges()
getWallDecorItem(…)
removeBatch(…)
removeDirt(…)
removeStumpOrBoulder(…)
tryToBuyNewBackpack()
GiantCrop
forSale
IClickableMenu
currentRegion
MeleeWeapon
attackSwordCooldownTime
doStabbingSwordFunction(…)
Monster
doHorizontalMovement(…)
durationOfRandomMovements
coinsToDrop
NPC
idForClones
Object
attachToSprinklerAttachment(…)
canBePlacedInWater()
consumeRecipe(…)
copperBar
goldBar
iridiumBar
ironBar
isHoeDirt and IsHoeDirt
PathFindController
CheckClearance(…)
limit
SaveGame
cropsOfTheWeek
currentFloor
currentWallpaper
FarmerFloor
farmerWallpaper
shippingTax
Spiker
GetSpawnPosition
Stats
barsSmelted and BarsSmelted
coalFound and CoalFound
coinsFound and coinsFound
starLevelCropsShipped and starLevelCropsShipped
Tool
batteredSwordSpriteIndex
copperColor
GetSecondaryEnchantmentCount()
goldColor
iridiumColor
nonUpgradeable
parsnipSpriteIndex
Stackable
startOfNegativeWeaponIndex
steelColor
Utility
buyFloor()
buyWallpaper()
cropsOfTheWeek()
facePlayerEndBehavior(…)
getRandomSlotCharacter()
plantCrops(…)
showLanternBar()
Renamed classes
These classes were renamed in 1.6:
old name new name
Game1.MusicContext MusicContext (in StardewValley.GameData)
LocationContext LocationContexts
SpecialOrder.QuestStatus SpecialOrderStatus (in StardewValley.SpecialOrders)
And these were moved to a different namespace:
type old namespace new namespace
AmethystEnchantment
AquamarineEnchantment
ArchaeologistEnchantment
ArtfulEnchantment
AutoHookEnchantment
AxeEnchantment
BaseEnchantment
BaseWeaponEnchantment
BottomlessEnchantment
BugKillerEnchantment
CrusaderEnchantment
DiamondEnchantment
EfficientToolEnchantment
EmeraldEnchantment
FishingRodEnchantment
GalaxySoulEnchantment
GenerousEnchantment
HaymakerEnchantment
HoeEnchantment
JadeEnchantment
MagicEnchantment
MasterEnchantment
MilkPailEnchantment
PanEnchantment
PickaxeEnchantment
PowerfulEnchantment
PreservingEnchantment
ReachingToolEnchantment
RubyEnchantment
ShavingEnchantment
ShearsEnchantment
SwiftToolEnchantment
TopazEnchantment
VampiricEnchantment
WateringCanEnchantment StardewValley StardewValley.Enchantments
Extensions StardewValley StardewValley.Extensions
ModDataDictionary
ModHooks StardewValley StardewValley.Mods
PathFindController
PathNode
PriorityQueue
SchedulePathDescription StardewValley StardewValley.Pathfinding
SpecialOrder StardewValley StardewValley.SpecialOrders
CollectObjective
DeliverObjective
DonateObjective
FishObjective
GiftObjective
JKScoreObjective
OrderObjective
ReachMineFloorObjective
ShipObjective
SlayObjective StardewValley StardewValley.SpecialOrders.Objectives
FriendshipReward
GemsReward
MailReward
MoneyReward
OrderReward
ResetEventReward StardewValley StardewValley.SpecialOrders.Rewards
Other API changes
These class members changed in 1.6:
type member migration
BigSlime heldObject Replaced by heldItem, which allows non-object items too.
Bush overrideSeason Removed; use bush.Location.GetSeason() instead.
greenhouseBush Removed; use bush.IsSheltered() or bush.currentLocation.IsGreenhouse instead.
inBloom Remove the arguments, like bush.inBloom(Game1.currentSeason, Game1.dayOfMonth) → bush.inBloom().
Character getStandingX
getStandingY
getStandingXY Removed; use character.StandingPixel instead.
getTileLocation
getTileX
getTileY
Removed; use character.Tile instead.
getTileLocationPoint Removed; use character.TilePoint instead.
Chest MoveToSafePosition Replaced by the simpler TryMoveToSafePosition
Dialogue dialogues Changed from List<string> to List<DialogueLine>. The Text field on each dialogue line is equivalent to the old value.
isOnFinalDialogue() This now indicates whether it's showing the last dialogue with message text; there may still be entries in dialogues which apply side-effects without message text.
Farmer changePants(…) Renamed to changePantsColor(…) for consistency with change[Eye|Hair|Shoe]Color.
isMarried() Renamed to isMarriedOrRoommates() for clarity.
visibleQuestCount Replaced by hasVisibleQuests.
Flooring GetFloorPathLookup Use Game1.floorPathData instead.
Forest log Moved into Forest.resourceClumps.
FruitTree GreenHouseTree Replaced by IgnoresSeasonsHere().
Game1 bigCraftableInformation Overhauled into Game1.bigCraftableData.
clothingInformation Overhauled into Game1.shirtData and Game1.pantsData.
objectInformation Overhauled into Game1.objectData.
GameLocation getCharacters Removed; use the characters field instead.
GetMapPropertyPosition Replaced by TryGetMapPropertyAs, which supports multiple data types (not just Point).
isTileOccupied
isTileOccupiedForPlacement
isTileOccupiedIgnoreFloors
isTileLocationOpenIgnoreFrontLayers
isTileLocationTotallyClearAndPlaceable
isTileLocationTotallyClearAndPlaceableIgnoreFloors Removed. The collision logic has been significantly rewritten and uses a new set of methods (mainly isTilePassable, IsTileOccupiedBy, and CanItemBePlacedHere). Mods should ideally be updated to use the new methods.
Here's a drop-in set of extension methods which re-add the older methods. This lets you temporarily fix code until you can update it properly, but depending on these isn't recommended since they won't be maintained in future versions.
expand for non-recommended code 
GiantCrop which Replaced by itemId.
Item SanitizeContextTag Replaced by ItemContextTagManager.SanitizeContextTag.
LocalizedContentManager LanguageCodeString Now static.
LocationContextData Name Removed; use its dictionary key in Game1.locationContextData instead.
NetFields AddFields Removed; use AddField instead. For example:
// old code
NetFields.AddFields(textureName, spriteWidth, spriteHeight);

// new code
NetFields
    .AddField(textureName)
    .AddField(spriteWidth)
    .AddField(spriteHeight);
Note that the second argument (name) should usually be omitted, since it'll be auto-populated from the value passed to the first argument.
NPC canReceiveThisItemAsGift(…) Removed. The closest equivalent is item.canBeGivenAsGift(), or you can check if the NPC will accept the player's held object (as a gift or otherwise) using npc.tryReceiveActiveObject(Game1.player, probe: true).
Gender
female
male
undefined The Gender field now uses a Gender enum instead of numeric constants. For example, npc.Gender == NPC.female becomes npc.Gender == Gender.Female in 1.6.
homeRegion Removed; use npc.GetData()?.HomeRegion instead. Change 0 to "Other" or NPC.region_other, 1 to "Desert" or NPC.region_desert, and 2 to "Town" or NPC.region_town.
isBirthday Remove the arguments, like npc.isBirthday(Game1.currentSeason, Game1.dayOfMonth) → npc.isBirthday().
isVillager() Deprecated; use the character.IsVillager property instead.
populateRoutesFromLocationToLocationList Replaced by WarpPathfindingCache.PopulateCache.
Schedule No longer assignable, use one of the TryLoadSchedule overloads instead.
Object GetContextTagList() Replaced by GetContextTags(), which returns a hash set instead of a list.
HasBeenPickedUpByPlayer Removed; use HasBeenInInventory instead.
isPotentialBasicShippedCategory The second argument should now be an integer (like -75 or Object.VegetableCategory) instead of a string (like "-75").
Utility doesItemWithThisIndexExistAnywhere Replace with Utility.doesItemExistAnywhere, which takes a string item ID. For example:
Utility.doesItemWithThisIndexExistAnywhere(128) → Utility.doesItemExistAnywhere("(O)128");
Utility.doesItemWithThisIndexExistAnywhere(128, true) → Utility.doesItemExistAnywhere("(BC)128").
ForAllLocations
iterateAllCrops
iterateAllItems Removed; use the equivalent Utility.ForEach* methods instead.
GetHorseWarpRestrictionsForFarmer This now returns a flag enum instead of a list of integer values. The equivalent values are 1 → NoOwnedHorse, 2 → Indoors, 3 → NoRoom, and 4 → InUse.
For example:
// old code
bool inUse = Utility.GetHorseWarpRestrictionsForFarmer(player).Any(p => p == 4);

// new code
bool inUse = Utility.GetHorseWarpRestrictionsForFarmer(player).HasFlag(Utility.HorseWarpRestrictions.InUse);
Or to check if no restrictions apply:
bool canSummon = Utility.GetHorseWarpRestrictionsForFarmer(player) == Utility.HorseWarpRestrictions.None;
C# mods can patch Utility.GetHorseWarpErrorMessage if they need to add an error message for a custom restriction value.
getRandomTownNPC(…) Replaced by either Utility.GetRandomWinterStartParticipant(…) or Utility.getRandomNpcFromHomeRegion(NPC.region_town).
getTodaysBirthdayNPC Remove the arguments, like Utility.getTodaysBirthdayNPC(Game1.currentSeason, Game1.dayOfMonth) → Utility.getTodaysBirthdayNPC().
getPooledList
returnPooledList The game no longer uses a list pool. In most cases you should use the Utility.ForEach* methods instead, which don't need it.
numObelisksOnFarm Renamed to GetObeliskTypesBuilt, which searches all locations.
numSilos Removed.
If you're using this to calculate hay capacity, it's a bit more complicated in 1.6 since hay storage can be enabled for custom buildings and building construction can be enabled for any location. To get capacity for the current location, use Game1.currentLocation.GetHayCapacity() instead. To get total hay capacity in the world, use Utility.ForEachLocation to call it on every location.
If you actually need the number of silos, use location.getNumberBuildingsConstructed("Silo") (one location) or Game1.GetNumberBuildingsConstructed("Silo") (all locations).
removeThisCharacterFromAllLocations Removed; use Game1.removeCharacterFromItsLocation instead.
ShopMenu storeContext Replaced by ShopId.
Stats averageBedtime
beveragesMade
bouldersCracked
caveCarrotsFound
cheeseMade
chickenEggsLayed
copperFound
cowMilkProduced
cropsShipped
daysPlayed
diamondsFound
dirtHoed
duckEggsLayed
fishCaught
geodesCracked
giftsGiven
goatCheeseMade
goatMilkProduced
goldFound
goodFriends
individualMoneyEarned
iridiumFound
ironFound
itemsCooked
itemsCrafted
itemsForaged
itemsShipped
monstersKilled
mysticStonesCrushed
notesFound
otherPreciousGemsFound
piecesOfTrashRecycled
preservesMade
prismaticShardsFound
questsCompleted
rabbitWoolProduced
rocksCrushed
seedsSown
sheepWoolProduced
slimesKilled
stepsTaken
stoneGathered
stumpsChopped
timesFished
timesUnconscious
totalMoneyGifted
trufflesFound
weedsEliminated Removed; use the equivalent property or methods. For example, Game1.stats.daysPlayed can be replaced with Game1.stats.DaysPlayed or methods like Game1.stats.Get(StatKeys.DaysPlayed). See stat changes for C# mods.
getStat(…)
incrementStat(…) Replaced by Get(…) and Increment(…). See stat changes for C# mods.
stat_dictionary Renamed to Values. See stat changes for C# mods.
Woods stumps Moved into resourceClumps.
Check for obsolete code
Perform a full rebuild of your mod (in Visual Studio, click Build > Rebuild Solution), then check the Error List pane for any warnings like "'X' is obsolete". Anything from the vanilla game code which is marked obsolete won't work anymore and is only kept for save migrations. Usually the warning will include an explanation of what you should use instead.
Breaking changes for content packs
This section only describes how this update may break existing mods. See the what's new sections above for more info, including new functionality mods can use.
Standardized ID fields
Stardew Valley 1.6 adds an Id field to these assets. For Content Patcher content packs, these replace the previous synthetic ID:
asset old key new key migration steps
Data/ConcessionTastes
Data/MovieReactions
Data/RandomBundles (area)
Data/RandomBundles (bundle) Name
NPCName
AreaName
none Id None. The Id field is set automatically to the same value (or Name for bundles), so there's no change for content packs. Omit the new field when creating a new entry.
Data/FishPondData
Data/RandomBundles (bundle set) RequiredTags
none Id Use the new Id field to target an entry, and add it when creating a new entry. Required.
Data/TailoringRecipes FirstItemTags and SecondItemTags Id Use the new Id field to target an entry, and add it when creating a new entry. Defaults to the CraftedItemIds (comma-delimited) or CraftedItemId value if omitted, but there's a high chance of conflicts so mods should always specify a unique ID.
For example, let's say you have a patch like this using Content Patcher:
{
    "Format": "2.5.0",
    "Changes": [
        {
            "Action": "EditData",
            "Target": "Data/TailorRecipes",
            "Entries": {
                "item_cloth|item_pufferchick": {
                    "FirstItemTags": [ "item_cloth" ],
                    "SecondItemTags": [ "item_pufferchick" ],
                    "CraftedItemId": "(S)1260"
                }
            }
        }
    ]
}
When updating to Stardew Valley 1.6, replace the synthetic ID (item_cloth|item_pufferchick) with a real one:
To edit an existing entry, unpack the asset and get its new Id value.
To add a custom entry, use a unique string ID.
For example:
{
    "Format": "2.5.0",
    "Changes": [
        {
            "Action": "EditData",
            "Target": "Data/TailorRecipes",
            "Entries": {
                "ExampleAuthor.ModId_RainCoatFromPufferchick": {
                    "Id": "ExampleAuthor.ModId_RainCoatFromPufferchick", // need to specify ID again when creating it
                    "FirstItemTags": [ "item_cloth" ],
                    "SecondItemTags": [ "item_pufferchick" ],
                    "CraftedItemId": "(S)1260"
                }
            }
        }
    ]
}
Event ID changes
These docs should be merged into Modding:Event data. When copying content, make sure you attribute the original authors.
See also: string event IDs in what's new.
Events now have unique string IDs.
When creating an event:
New events should use a globally unique ID in the form Your.ModId_EventName. Existing events should be fine as-is, but it may be worth migrating them to avoid future conflicts.
Every non-fork event must have a precondition in its key (even if it's empty). For example, change "Your.ModId_EventName": "..." to "Your.ModId_EventName/": "...". This is needed for the game to distinguish between events and fork scripts.
"Example.ModId_EventName/": "...", // event: loaded automatically by the game
"SomeFork": "..."                  // event fork: ignored unless it's loaded through an event script
Monster eradication goal flag changes
See the updated docs at Modding:Monster eradication goals. The section below focuses on what's new in this version.
See also: Custom monster eradication goals.
The game now tracks Adventurer's Guild monster eradication goal completion by the goal ID, instead of the produced item. You'll need to replace these mail flags if you check them:
old flag new flag
Gil_Slime Charmer Ring Gil_Slimes
Gil_Savage Ring Gil_Shadows
Gil_Vampire Ring Gil_Bats
Gil_Skeleton Mask Gil_Skeletons
Gil_Insect Head Gil_Insects
Gil_Hard Hat Gil_Duggy
Gil_Burglar's Ring Gil_DustSpirits
Gil_Crabshell Ring Gil_Crabs
Gil_Arcane Hat Gil_Mummies
Gil_Knight's Helmet Gil_Dinos
Gil_Napalm Ring Gil_Serpents
Gil_Telephone Gil_FlameSpirits
XNB impact
Overview
This section provides a summary of the XNB files which changed in Stardew Valley 1.6. This doesn't include new files (since they won't impact existing mods), or text changes in non-English files.
XNB mods are disproportionately affected, since...
they replace the entire file;
they're loaded through the MonoGame content pipeline which is less tolerant of format changes;
they don't benefit from the compatibility rewrites Content Patcher provides for its content packs.
Content Patcher packs are typically unaffected (and Content Patcher will try to rewrite content packs automatically). However if a content pack replaces an entire asset instead of editing, it's more likely to be affected like an XNB mod.
Changed assets
Compatibility is broadly grouped into four categories:
"✘ broken": mods will remove new content or significant changes, or the mod's intended changes will no longer work. Effects may range from display bugs to crashes, depending how the game uses that specific content.
"✘ will remove changes": mods will remove minor changes in 1.6 (e.g. typo fixes).
"✓ mostly unaffected": mods will only be affected if they replace the entire asset, or edit specific entries or fields.
Blank: no expected impact for the vast majority of mods.
content asset changes in 1.6 compatibility for pre-1.6 mods
XNB mods Content Patcher packs
Buildings/houses
fixed missing pixels
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/Abigail
Characters/Dialogue/Alex
added flower dance dialogue
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/Caroline
Characters/Dialogue/Demetrius
fixed typos
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/Elliott
added flower dance dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/Emily
added flower dance dialogue
fixed typos
updated %revealtaste format (backwards-compatible)
✘ broken ✓ mostly unaffected
Characters/Dialogue/George
added Winter Star gift exchange dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/Gus
fixed typos
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/Haley
added flower dance dialogue
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/Harvey
added flower dance dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/Jas
Characters/Dialogue/Jodi
fixed typos
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/Krobus
added roommate stardrop dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/Leah
added flower dance dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/Lewis
updated %revealtaste format (backwards-compatible)
Characters/Dialogue/Linus
added dumpster dive dialogue
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/Marnie
added Stardew Valley Fair dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/MarriageDialogue
Characters/Dialogue/MarriageDialogueAbigail
Characters/Dialogue/MarriageDialogueElliott
fixed typos
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/MarriageDialogueEmily
changed spring_Maru key to spring_Emily
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/MarriageDialogueKrobus
Characters/Dialogue/MarriageDialogueLeah
Characters/Dialogue/MarriageDialogueMaru
Characters/Dialogue/MarriageDialoguePenny
Characters/Dialogue/MarriageDialogueSam
fixed typos
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/Maru
added flower dance dialogue
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/Penny
added flower dance dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/Pierre
added Stardew Valley Fair dialogue
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/Robin
fixed typos
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/Sam
added flower dance dialogue
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/Sandy
fixed typos
✘ will remove changes ✓ mostly unaffected
Characters/Dialogue/Sebastian
added flower dance dialogue
fixed typos
✘ broken ✓ mostly unaffected
Characters/Dialogue/Willy
added Stardew Valley Fair dialogue
✘ broken ✓ mostly unaffected
Characters/Dialogue/Shane
added flower dance dialogue
✘ broken ✓ mostly unaffected
Characters/Farmer/hats
removed stray pixel on chicken mask
✘ will remove changes ✓ mostly unaffected
Characters/schedules/Elliott
fixed order of Fri_6 and Fri entries
✘ broken
Characters/schedules/Lewis
fixed winter_Sun schedule
✘ broken ✓ mostly unaffected
Characters/schedules/Maru
fixed summer_Mon and summer_Sun schedules
✘ broken ✓ mostly unaffected
Characters/schedules/Penny
fixed summer_Sun schedule
✘ broken ✓ mostly unaffected
Characters/Schedules/Shane
fixed dialogue key
✘ will remove changes ✓ mostly unaffected
Data/animationDescriptions
fixed frame in Lewis' Saloon drinking animation
✘ will remove changes ✓ mostly unaffected
Data/AquariumFish
changed key type
added hat position for Sea Urchin
✘ broken ✓ mostly unaffected
Data/BigCraftablesInformation
asset replaced by Data/BigCraftables:
migrated to data model format
added new features
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/Blueprints
asset replaced by Data/Buildings:
migrated to data model format
added new features
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/Boots
changed key type
added display name
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/Bundles
can no longer omit empty fields before display name
added display name field in English
removed meat items in animal bundle
✘ broken ✘ likely broken
Data/ClothingInformation
asset replaced by Data/Pants and Data/Shirts:
migrated to data model format
added new features
✘ broken ✘ likely broken
Data/Concessions
added new required fields (Texture and SpriteIndex)
replaced translations with tokenizable strings
changed IDs to strings
✘ broken ✘ likely broken
Data/ConcessionTastes
added automatic ID field
✘ broken ✓ mostly unaffected
Data/CookingRecipes
replaced translations with tokenizable strings
display names can now be omitted to use item name
✘ will remove changes ✓ may remove unaffected
Data/CraftingRecipes
replaced translations with tokenizable strings
display names can now be omitted to use item name
added default unlock condition
fixed typo in Cookout Kit entry
✘ broken ✓ mostly unaffected
Data/Crops
completely overhauled
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/Events/AnimalShop
updated command syntax (backwards-compatible)
Data/Events/Farm
replaced send-mail events with trigger actions
updated pet event to support custom pet types
✘ broken ✓ mostly unaffected
(✘ may cause duplicate mail if they edit
send-mail events)
Data/Events/FishShop
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/Events/Forest
fixed typos
updated Jas faceDirection command for sewer event
✘ will remove changes ✓ mostly unaffected
Data/Events/IslandHut
updated how Leo's name is translated
✘ will remove changes ✓ mostly unaffected
Data/Events/IslandNorth
updated quote format
fixed blank music field (backwards-compatible)
✘ broken ✓ mostly unaffected
(✘ likely broken if they edit the 6497421 event)
Data/Events/IslandSouth
fixed blank music field (backwards-compatible)
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/Events/JoshHouse
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/Events/LeahHouse
fixed move command format in Leah's 2-heart event
fixed typos
✘ broken ✓ mostly unaffected
Data/Events/Mountain
fixed skipped dialogue in Maru's 14-heart event
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/Events/Saloon
Data/Events/ScienceHouse
Data/Events/SebastianRoom
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/Events/Town
fixed warp command format in community center completed event
fixed typos
✘ broken ✓ mostly unaffected
Data/Events/WizardHouse
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/ExtraDialogue
split SummitEvent_Dialogue1_Spouse entry
fixed event command formats in some summit dialogue
moved dumpster dive dialogue into NPC files
removed unused entries
fixed typos
✘ broken ✓ mostly unaffected
Data/FarmAnimals
completely overhauled
✘ broken ✘ broken
Data/Festivals/fall16
updated command syntax (backwards-compatible)
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/Festivals/fall27
removed shop field (moved into Data/Shops)
✓ mostly unaffected ✓ mostly unaffected
Data/Festivals/spring13
migrated to new warpFarmers command
removed shop field (moved into Data/Shops)
updated faceDirection syntax
fixed typos
✘ broken ✓ mostly unaffected
(✘ broken if they edit mainEvent or
afterEggHunt fields)
Data/Festivals/spring24
Data/Festivals/summer11
Data/Festivals/summer28
migrated to new warpFarmers command
removed shop field (moved into Data/Shops)
✘ broken ✓ mostly unaffected
(✘ broken if they edit mainEvent field)

Data/Festivals/winter8
migrated to new warpFarmers command
removed shop field (moved into Data/Shops)
removed broken loadActors MainEvent command
✘ broken ✓ mostly unaffected
(✘ broken if they edit mainEvent or
afterIceFishing field)
Data/Festivals/winter25
removed shop field (moved into Data/Shops)
✓ mostly unaffected ✓ mostly unaffected
Data/Fish
no longer has per-language versions
changed key type
field 13 now refers to whether fish can be tutorial catch
✘ broken ✘ likely broken
Data/FishPondData
added required Id & optional Precedence fields
standardized ID→Id naming
changed to qualified item IDs
moved fallback entries to bottom
✘ broken ✘ likely broken
Data/fruitTrees
completely overhauled
✘ broken ✘ broken
Data/Furniture
changed key type
replaced translations with tokenizable strings
changed key type
can no longer omit empty fields before display name
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/hats
changed key type
can no longer omit empty fields before display name
added display name field in English
✘ broken ✘ likely broken
Data/Locations
completely overhauled
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/mail
migrated to %item id (backwards-compatible)
removed unused entries
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/Monsters
changed Dust Spirit display name to Dust Sprite
✘ will remove changes ✓ mostly unaffected
Data/Movies
significantly overhauled
✘ broken ✘ broken
Data/MoviesReactions
replaced translations with tokenizable strings
standardized ID→Id naming
fixed typo
✘ broken ✓ mostly unaffected
Data/NPCDispositions
asset replaced by Data/Characters
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/NPCGiftTastes
removed invalid item IDs
✘ will remove changes ✓ mostly unaffected
Data/ObjectContextTags
asset removed (replaced by ContextTags field in Data/BigCraftables and Data/Objects)
✘ broken ✓ mostly unaffected
(covered by runtime migration,
except context tags defined
before their objects and context
tags for bigcraftables.)
Data/ObjectInformation
asset replaced by Data/Objects:
migrated to data model format
added new features
added new entries
adjusted litter items
fixed typos
✘ broken ✓ mostly unaffected
(covered by runtime migration)
Data/PaintData
fixed trailing slash in Deluxe Barn entry
Data/Quests
changed key type to string
migrated to use item IDs (backwards-compatible)
fixed typo
✘ broken ✓ mostly unaffected
Data/RandomBundles
add optional Id field
✘ broken ✓ mostly unaffected
Data/SecretNotes
updated %revealtaste format (backwards-compatible)
✘ will remove changes ✓ mostly unaffected
Data/SpecialOrders
changed type of Repeatable and Duration fields
added optional CustomFields and Conditions fields
✘ broken
Data/SpousePatios
Data/SpouseRooms
removed asset (merged into Data/Characters)
✘ broken ✘ broken
Data/TailoringRecipes
changed to string item IDs (backwards-compatible)
added optional Id and CraftedItemIdFeminine fields
removed CraftedItemColor field
adjusted recipes for gender-variant shirts
standardized ID→Id naming
✘ broken ✓ mostly unaffected
(MoveEntries may break, but fallback entries
are now checked last automatically)
Data/TV/CookingChannel
Data/TV/TipChannel
fixed typos
✘ will remove changes ✓ mostly unaffected
Data/weapons
completely overhauled
✘ broken ✓ mostly unaffected
(covered by runtime migration)
LooseSprites/Cursors
new sprites in empty area
moved mailbox to Buildings/Mailbox
✘ broken ✓ mostly unaffected
LooseSprites/Cursors2
new sprite in empty area
✘ broken ✓ mostly unaffected
LooseSprites/map
redrawn to better match in-game locations
added more detail
✘ broken ✘ likely broken
Maps/AbandonedJojaMart
Maps/AdventureGuild
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/AnimalShop
removed unused pathfinding tiles
Maps/ArchaeologyHouse
removed unused pathfinding tiles
moved Music property into Data/Locations
Maps/Backwoods
Maps/Backwoods_GraveSite
Maps/Backwoods_Staircase
removed unused tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/Barn
Maps/Barn2
removed unused map properties
Maps/Barn3
added AutoFeed map property
removed unused map properties
✘ broken
Maps/BathHouse_Entry
Maps/BathHouse_MensLocker
moved Music property into Data/Locations
removed unused pathfinding tiles
✘ will remove changes ✓ mostly unaffected
Maps/BathHouse_Pool
removed unused pathfinding tiles
removed unused map & tile properties
Maps/BathHouse_WomensLocker
moved Music property into Data/Locations
removed unused pathfinding tiles
✘ will remove changes ✓ mostly unaffected
Maps/Beach
removed unused map properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
Maps/Beach-Jellies
Maps/Beach-Luau
Maps/Beach-NightMarket
updated for festival shops now in Data/Shops
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
✘ broken ✓ mostly unaffected
Maps/Blacksmith
removed unused pathfinding tiles
Maps/BoatTunnel
standardized T for boolean tile property values (backwards-compatible)
Maps/BugLand
moved Music property into Data/Locations
standardized T for boolean tile property values (backwards-compatible)
✘ will remove changes ✓ mostly unaffected
Maps/BusStop
removed unused map/tile properties
removed unused pathfinding tiles
changed Action BusTicket to Action None
standardized T for boolean tile property values (backwards-compatible)
Maps/Caldera
removed unused map property
Maps/Cellar
standardized T for boolean tile property values (backwards-compatible)
Maps/Club
added LocationContext map property
moved Music property into Data/Locations
✘ broken ✓ mostly unaffected
Maps/Coop
Maps/Coop2
removed unused map properties
Maps/Coop3
added AutoFeed map property
removed unused map properties
✘ broken
Maps/Desert
added LocationContext map property
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
✘ broken
Maps/ElliottHouse
removed unused pathfinding tiles
Maps/Farm
Maps/Farm_Combat
Maps/Farm_Fishing
Maps/Farm_Foraging
Maps/Farm_FourCorners
Maps/Farm_Island
Maps/Farm_Mining
added new tilesheet
added cabin positions for players 5–8
added PetBowlLocation map property (for Maps/Four_Corners and Farm/Island only)
added SpouseAreaLocation map property (for Maps/Farm_Island only)
significant tile & tile property changes
removed farmhouse + pet bowl areas (now moveable)
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
✘ broken ✘ may remove changes
Maps/Farm_Greenhouse_Dirt
Maps/Farm_Greenhouse_Dirt_FourCorners
removed unused map properties
standardized T for boolean tile property values (backwards-compatible)
Maps/FarmHouse
Maps/FarmHouse_Bedroom_Normal
Maps/FarmHouse_Bedroom_Open
Maps/FarmHouse_Cellar
Maps/FarmHouse_ChildBed_0
Maps/FarmHouse_ChildBed_1
Maps/FarmHouse_CornerRoom_Add
Maps/FarmHouse_CornerRoom_Remove
Maps/FarmHouse_SouthernRoom_Add
Maps/FarmHouse_SouthernRoom_Remove
Maps/FarmHouse1
Maps/FarmHouse1_marriage
Maps/FarmHouse2
Maps/FarmHouse2_marriage
removed unused map properties
standardized T for boolean tile property values (backwards-compatible)
Maps/FishingGame
standardized T for boolean tile property values (backwards-compatible)
Maps/FishShop
fixed broken DayTiles and NightTiles values
removed unused pathfinding tiles
✘ will remove changes ✓ mostly unaffected
Maps/Forest
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
Maps/Forest-FlowerFestival
updated for festival shops now in Data/Shops
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
✘ broken ✓ mostly unaffected
Maps/Forest-IceFestival
updated for festival shops now in Data/Shops
fixed warp positions
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
✘ broken ✓ mostly unaffected
Maps/Forest-SewerClean
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/HaleyHouse
Maps/HarveyRoom
removed unused pathfinding tiles
Maps/Hospital
removed deprecated UniquePortrait & UniqueSprite map properties
removed unused pathfinding tiles
✘ will remove changes
(This may cause mod conflicts) ✓ mostly unaffected
Maps/Island_Bridge_Broken
Maps/Island_Bridge_Repaired
Maps/Island_House_Cave
removed unused map properties
Maps/Island_N
update walnut bush tile so it still works in 1.6
removed unused tile property
✘ broken ✓ mostly unaffected
Maps/IslandNorthCave1
Maps/IslandSouthEastCave
Maps/IslandSouthEastCave_pirates
Maps/IslandWestCave1
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/Island_Bridge_Broken
Maps/Island_Bridge_Repaired
removed unused map property
standardized T for boolean tile property values (backwards-compatible)
Maps/Island_E
Maps/IslandFarmCave
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/Island_House_Cave
removed unused map property
standardized T for boolean tile property values (backwards-compatible)
Maps/Island_Hut
moved Music property into Data/Locations
standardized T for boolean tile property values (backwards-compatible)
✘ will remove changes ✓ mostly unaffected
Maps/Island_N
added a NowSpawn False tile property to fix tree that hides a golden walnut
removed unused tile property
standardized T for boolean tile property values (backwards-compatible)
✘ will remove changes ✓ mostly unaffected
Maps/Island_N_Trader
Maps/Island_Secret
removed unused tile property
standardized T for boolean tile property values (backwards-compatible)
Maps/Island_Shrine
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/Island_W
removed unused tile property
standardized T for boolean tile property values (backwards-compatible)
Maps/IslandFarmHouse
removed unused tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/JojaMart
Maps/JoshHouse
Maps/LeahHouse
Maps/ManorHouse
removed unused pathfinding tiles
Maps/MarnieBarn
removed unused map properties
Maps/Mine
updated for minecart changes
removed unused map properties
✘ broken ✓ mostly unaffected
Maps/Mountain
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
Maps/Mountain-BridgeFixed
Maps/Mountain_Shortcuts
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/MovieTheater
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/MovieTheaterScreen
updated for tilesheet changes
✘ broken visuals (e.g. missing chairs) ✓ mostly unaffected
(✘ broken visuals if they edit the affected tiles)
Maps/MovieTheaterScreen_TileSheet
improved light cone
moved chair sprite to make room for new light cone
✘ broken visuals (e.g. missing chairs) ✓ mostly unaffected
(✘ broken visuals if they edit the affected sprites)
Maps/paths
added icon for custom wild tree spawn
removed unused pathfinding tiles
Maps/QiNutRoom
moved Music property into Data/Locations
standardized T for boolean tile property values (backwards-compatible)
✘ will remove changes ✓ mostly unaffected
Maps/Railroad
removed unused map property
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
Maps/Saloon
Maps/SamHouse
removed unused pathfinding tiles
Maps/SandyHouse
added LocationContext map property
✘ broken
Maps/ScienceHouse
Maps/SebastianRoom
removed unused pathfinding tiles
Maps/SeedShop
removed unused tile properties
removed unused pathfinding tiles
Maps/Sewer
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/Shed
Maps/Shed2
added FloorIDs and WallIDs map properties
✘ broken
Maps/SkullCave
added LocationContext map property
moved Music property into Data/Locations
✘ broken ✓ mostly unaffected
Maps/SlimeHutch
removed unused tile property
standardized T for boolean tile property values (backwards-compatible)
Maps/spousePatios
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/spring_outdoorsTileSheet
Maps/summer_outdoorsTileSheet
Maps/fall_outdoorsTileSheet
Maps/winter_outdoorsTileSheet
pet bowl moved to Buildings/Pet Bowl
✓ mostly unaffected ✓ mostly unaffected
Maps/Submarine
removed unused tile property
Maps/Sunroom
added IsGreenhouse</samp map property
✘ broken
Maps/Tent
removed unused pathfinding tiles
Maps/Town
updated garbage can IDs (backwards-compatible)
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
Maps/Town-Christmas
updated for festival shops now in Data/Shops
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
✘ broken ✓ mostly unaffected
Maps/Town-DogHouse
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/Town-EggFestival
updated for festival shops now in Data/Shops
fixed Elliott appearing twice during egg hunt
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
✘ broken ✓ mostly unaffected
Maps/Town-Fair
removed unused map/tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/Town-Halloween
updated for festival shops now in Data/Shops
removed unused map/tile properties
removed unused pathfinding tiles
standardized T for boolean tile property values (backwards-compatible)
✘ broken ✓ mostly unaffected
Maps/Town-Theater
Maps/Town-TheaterCC
Maps/Town-TrashGone
removed unused tile properties
standardized T for boolean tile property values (backwards-compatible)
Maps/Trailer
removed unused tile property
removed unused pathfinding tiles
Maps/Trailer_big
removed unused pathfinding tiles
Maps/Tunnel
moved Music property into Data/Locations
removed unused map property
✘ will remove changes ✓ mostly unaffected
Maps/WitchHut
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/WitchSwamp
moved Music property into Data/Locations
standardized T for boolean tile property values (backwards-compatible)
✘ will remove changes ✓ mostly unaffected
Maps/WitchWarpCave
moved Music property into Data/Locations
✘ will remove changes ✓ mostly unaffected
Maps/WizardHouse
moved Music property into Data/Locations
removed unused pathfinding tiles
✘ will remove changes ✓ mostly unaffected
Maps/WizardHouseBasement
moved Music property into Data/Locations
removed unused map property
✘ will remove changes ✓ mostly unaffected
Maps/Woods
removed unused tile property
standardized T for boolean tile property values (backwards-compatible)
Minigames/boatJourneyMap
asset replaced by redrawn seasonal variants like fall_boatJourneyMap
✘ broken ✘ broken
Strings/Characters
added new entries
✘ broken
Strings/BundleNames
removed unused entries
Strings/Characters
added new entries
removed unused entry
✘ broken
Strings/credits
updated for 1.6
various changes
✘ will remove changes ✘ will remove changes
Strings/Events
moved flower dance dialogue for Emily and Shane to their NPC dialogue files
✓ mostly unaffected ✓ mostly unaffected
Strings/FarmAnimals
added new entries
✘ broken
Strings/Lexicon
removed unused entries
Strings/Locations
added new entries
added placeholder to BusStop_BuyTicketToDesert
renamed BoatTunnel_BuyTicket to BuyTicket
updated how Professor Snail's name is translated, removed unused entries
fixed typos
✘ broken ✓ mostly unaffected
Strings/NPCNames
added new entries
removed unused entry
✘ broken
Strings/Notes
trimmed trailing whitespace
Strings/Objects
added new entries
removed unused entries
✘ broken
Strings/schedules/Caroline
fixed typo
✘ will remove changes ✓ mostly unaffected
Strings/SpecialOrderStrings
renamed Dust Spirits to Dust Sprites
fixed typos
✘ will remove changes ✓ mostly unaffected
Strings/StringsFromCSFiles
added new entries
removed unused entries
reworked FarmComputer_* translations
merged some gendered translations
merged ItemDeliveryQuest.cs.13533 into ItemDeliveryQuest.cs.13534–13536
changed some player names from {0} to @
fixed typo
✘ broken ✓ mostly unaffected
Strings/StringsFromMaps
fixed typos
removed unused entries
✘ will remove changes
Strings/UI
added new entries
added placeholder for cabin count in Character_CoopHelpString
fixed typos
removed unused entries
✘ broken ✓ mostly unaffected
Removed unused assets
Stardew Valley 1.6 deletes assets which weren't used by the game. Mods usually aren't affected by this.
Removed assets:
Characters/Dana
Characters/Dick
Characters/femaleRival
Characters/maleRival
Characters/shirts
Characters/WeddingOutfits
Data/TV/InterviewShow
Effects/BrightWhite
Fonts/tinyFontBorder
Maps/Cabin
Maps/Cabin1
Maps/Cabin1_marriage
Maps/Cabin2
Maps/Cabin2_marriage
Maps/Island_Boulder_Removed
Maps/qiNutRoom_tilesheet_0
Maps/spring_outrdoorsTileSheet_lightergrass
Portraits/Dobson
TerrainFeatures/DiggableWall_basic
TerrainFeatures/DiggableWall_basic_dark
TerrainFeatures/DiggableWall_frost
TerrainFeatures/DiggableWall_frost_dark
TerrainFeatures/DiggableWall_lava
TerrainFeatures/DiggableWall_lava_dark
TerrainFeatures/Quartz
Vanilla release notes
Moved to Version History#1.6.
See also
Modding wishlist items done in Stardew Valley 1.6 lists a few specialized changes not mentioned on this page.
Category: Modding